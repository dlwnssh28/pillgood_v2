{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState } from 'vuex';\nimport axios from 'axios';\nimport '../assets/styles.css';\nexport default {\n  name: 'CartPage',\n  data() {\n    return {\n      localCartItems: [] // 로컬 상태로 관리할 장바구니 항목\n    };\n  },\n  computed: {\n    ...mapState('cart', {\n      cartItems: state => state.cartItems\n    }),\n    totalAmount() {\n      return this.localCartItems.filter(item => item.selected).reduce((total, item) => total + item.price * item.productQuantity, 0);\n    }\n  },\n  watch: {\n    cartItems: {\n      immediate: true,\n      handler(newItems) {\n        // Vuex 상태가 변경될 때 로컬 상태를 업데이트\n        this.localCartItems = newItems.map(item => ({\n          ...item,\n          selected: true // 모든 아이템을 기본적으로 선택 상태로 설정\n        }));\n\n        // 각 제품의 이미지를 가져오는 작업 수행\n        this.localCartItems.forEach(item => {\n          this.fetchProductImage(item);\n        });\n      }\n    }\n  },\n  methods: {\n    async fetchProductImage(item) {\n      try {\n        const response = await axios.get(`/api/products/detail/${item.productId}`);\n        item.productImage = this.extractFirstImage(response.data.productImage);\n      } catch (error) {\n        console.error(`Error fetching image for product ID ${item.productId}:`, error);\n        item.productImage = null; // 기본 이미지로 설정\n      }\n    },\n    extractFirstImage(htmlString) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(htmlString, 'text/html');\n      const imgTag = doc.querySelector('img');\n      return imgTag ? imgTag.src : null;\n    },\n    decreaseQuantity(item) {\n      if (item.productQuantity > 1) {\n        item.productQuantity--;\n        this.updateCartItem(item);\n      }\n    },\n    increaseQuantity(item) {\n      item.productQuantity++;\n      this.updateCartItem(item);\n    },\n    async updateCartItem(item) {\n      try {\n        await this.$store.dispatch('cart/updateCartItem', item);\n        // 선택 상태 유지\n        const updatedItem = this.localCartItems.find(localItem => localItem.cartNo === item.cartNo);\n        if (updatedItem) {\n          updatedItem.selected = item.selected;\n        }\n      } catch (error) {\n        console.error('장바구니 항목 업데이트 에러:', error);\n      }\n    },\n    async deleteCartItem(item) {\n      try {\n        await this.$store.dispatch('cart/deleteCartItem', item.cartNo);\n        this.localCartItems = this.localCartItems.filter(localItem => localItem.cartNo !== item.cartNo);\n      } catch (error) {\n        console.error('장바구니 항목 삭제 에러:', error);\n      }\n    },\n    selectAllItems() {\n      this.localCartItems.forEach(item => {\n        item.selected = true;\n      });\n    },\n    deselectAllItems() {\n      this.localCartItems.forEach(item => {\n        item.selected = false;\n      });\n    },\n    async placeOrder() {\n      const selectedItems = this.localCartItems.filter(item => item.selected);\n      if (selectedItems.length === 0) {\n        alert('주문할 상품을 선택하세요.');\n        return;\n      }\n      try {\n        await axios.post('/api/orders/prepare', selectedItems, {\n          withCredentials: true\n        });\n        this.$router.push({\n          name: 'Order'\n        });\n      } catch (error) {\n        console.error('Error preparing order:', error);\n      }\n    }\n  },\n  mounted() {\n    this.$store.dispatch('cart/fetchCartItems');\n  }\n};","map":{"version":3,"names":["mapState","axios","name","data","localCartItems","computed","cartItems","state","totalAmount","filter","item","selected","reduce","total","price","productQuantity","watch","immediate","handler","newItems","map","forEach","fetchProductImage","methods","response","get","productId","productImage","extractFirstImage","error","console","htmlString","parser","DOMParser","doc","parseFromString","imgTag","querySelector","src","decreaseQuantity","updateCartItem","increaseQuantity","$store","dispatch","updatedItem","find","localItem","cartNo","deleteCartItem","selectAllItems","deselectAllItems","placeOrder","selectedItems","length","alert","post","withCredentials","$router","push","mounted"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\CartPage.vue"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <h2 class=\"text-melon\">장바구니</h2>\n      <div class=\"box-container box-shadow\">\n        <div class=\"bttn-container\" style=\"width: 300px;\">\n          <button @click=\"selectAllItems\" class=\"btn btn-green\">전체 선택</button>\n          <button @click=\"deselectAllItems\" class=\"btn btn-gray\">전체 선택 해제</button>\n        </div>\n        <hr class=\"line\">\n          <table class=\"line-table\" v-if=\"localCartItems.length > 0\">\n\n            <thead>\n              <tr>\n                <th></th>\n                  <th colspan=\"2\">상품</th>\n                  <th>수량</th>\n                  <th>가격</th>\n                  <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"item in localCartItems\" :key=\"item.cartNo\">\n                <td><input type=\"checkbox\" v-model=\"item.selected\" /></td>\n                <td ><div class=\"item-image\"><img :src=\"item.productImage || '../assets/product_01.png'\" alt=\"\"></div></td>\n                <td>{{ item.productName }}</td>\n                <td>\n                  <div class=\"item-quantity\">\n                    <button @click=\"decreaseQuantity(item)\">-</button>\n                    <span>{{ item.productQuantity }}</span>\n                    <button @click=\"increaseQuantity(item)\">+</button>\n                    </div>\n                </td>\n                <td>{{ item.price * item.productQuantity }} 원</td>\n                <td>\n                  <button @click=\"deleteCartItem(item)\" class=\"btn btn-gray\">삭제</button>\n                  </td>\n              </tr>\n            </tbody>\n          </table>\n          <div v-else>\n              장바구니에 상품이 없습니다.\n          </div>\n          <hr class=\"line\">\n          <div class=\"total-amount\" v-if=\"localCartItems.length > 0\">선택한 상품 총 금액: {{ totalAmount }} 원</div>\n          <div class=\"btn-container\" v-if=\"localCartItems.length > 0\">\n              <button @click=\"placeOrder\" class=\"btn btn-green\">주문하기</button>\n          </div>\n      </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex';\nimport axios from 'axios';\nimport '../assets/styles.css';\n\nexport default {\n  name: 'CartPage',\n  data() {\n    return {\n      localCartItems: [] // 로컬 상태로 관리할 장바구니 항목\n    };\n  },\n  computed: {\n    ...mapState('cart', {\n      cartItems: state => state.cartItems\n    }),\n    totalAmount() {\n      return this.localCartItems\n        .filter(item => item.selected)\n        .reduce((total, item) => total + item.price * item.productQuantity, 0);\n    }\n  },\n  watch: {\n    cartItems: {\n      immediate: true,\n      handler(newItems) {\n        // Vuex 상태가 변경될 때 로컬 상태를 업데이트\n        this.localCartItems = newItems.map(item => ({\n          ...item,\n          selected: true // 모든 아이템을 기본적으로 선택 상태로 설정\n        }));\n\n        // 각 제품의 이미지를 가져오는 작업 수행\n        this.localCartItems.forEach(item => {\n          this.fetchProductImage(item);\n        });\n      }\n    }\n  },\n  methods: {\n    async fetchProductImage(item) {\n      try {\n        const response = await axios.get(`/api/products/detail/${item.productId}`);\n        item.productImage = this.extractFirstImage(response.data.productImage);\n      } catch (error) {\n        console.error(`Error fetching image for product ID ${item.productId}:`, error);\n        item.productImage = null; // 기본 이미지로 설정\n      }\n    },\n    extractFirstImage(htmlString) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(htmlString, 'text/html');\n      const imgTag = doc.querySelector('img');\n      return imgTag ? imgTag.src : null;\n    },\n    decreaseQuantity(item) {\n      if (item.productQuantity > 1) {\n        item.productQuantity--;\n        this.updateCartItem(item);\n      }\n    },\n    increaseQuantity(item) {\n      item.productQuantity++;\n      this.updateCartItem(item);\n    },\n    async updateCartItem(item) {\n      try {\n        await this.$store.dispatch('cart/updateCartItem', item);\n        // 선택 상태 유지\n        const updatedItem = this.localCartItems.find(localItem => localItem.cartNo === item.cartNo);\n        if (updatedItem) {\n          updatedItem.selected = item.selected;\n        }\n      } catch (error) {\n        console.error('장바구니 항목 업데이트 에러:', error);\n      }\n    },\n    async deleteCartItem(item) {\n      try {\n        await this.$store.dispatch('cart/deleteCartItem', item.cartNo);\n        this.localCartItems = this.localCartItems.filter(localItem => localItem.cartNo !== item.cartNo);\n      } catch (error) {\n        console.error('장바구니 항목 삭제 에러:', error);\n      }\n    },\n    selectAllItems() {\n      this.localCartItems.forEach(item => {\n        item.selected = true;\n      });\n    },\n    deselectAllItems() {\n      this.localCartItems.forEach(item => {\n        item.selected = false;\n      });\n    },\n    async placeOrder() {\n      const selectedItems = this.localCartItems.filter(item => item.selected);\n      if (selectedItems.length === 0) {\n        alert('주문할 상품을 선택하세요.');\n        return;\n      }\n      try {\n        await axios.post('/api/orders/prepare', selectedItems, { withCredentials: true });\n        this.$router.push({ name: 'Order' });\n      } catch (error) {\n        console.error('Error preparing order:', error);\n      }\n    }\n  },\n  mounted() {\n    this.$store.dispatch('cart/fetchCartItems');\n  }\n};\n</script>\n\n<style scoped>\n.bttn-container {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.delete-btn {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n}\n\n.item-image img {\n  width: 200px;\n  height: 200px;\n  object-fit: cover;\n  border-radius: 8px;\n}\n\n.item-quantity {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  justify-content: center;\n}\n\n.item-quantity button {\n  width: 30px;\n  height: 30px;\n  background-color: #ddd;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.total-amount {\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  padding: 20px;\n  font-size: 1.5rem;\n  font-weight: bold;\n  background-color: #f1f1f1;\n  border-radius: 8px;\n  margin-top: 20px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}