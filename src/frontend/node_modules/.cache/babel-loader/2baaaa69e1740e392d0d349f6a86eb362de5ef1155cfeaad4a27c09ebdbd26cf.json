{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapGetters } from 'vuex';\nimport axios from '../axios'; // axios 인스턴스 가져오기\n\nexport default {\n  name: 'AdminMemberList',\n  data() {\n    return {\n      selectedFilter: '',\n      searchQuery: '',\n      selectedCoupons: {}\n    };\n  },\n  computed: {\n    ...mapGetters('member', ['members']),\n    ...mapGetters('coupon', ['activeCoupons']),\n    filteredMembers() {\n      let members = this.members;\n      if (this.selectedFilter && this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n        members = members.filter(member => {\n          if (this.selectedFilter === 'memberName') {\n            return member.name && member.name.toLowerCase().includes(query);\n          } else if (this.selectedFilter === 'email') {\n            return member.email && member.email.toLowerCase().includes(query);\n          }\n          return true;\n        });\n      }\n      return members.sort((a, b) => new Date(b.registrationDate) - new Date(a.registrationDate));\n    }\n  },\n  async created() {\n    await this.checkLoginStatus();\n    await this.fetchMembers();\n    await this.fetchActiveCoupons();\n  },\n  methods: {\n    ...mapActions('member', {\n      checkLoginStatus: 'checkLoginStatus',\n      fetchMembers: 'fetchMembers',\n      deleteMemberFromStore: 'deleteMember',\n      setEditingMember: 'setEditingMember'\n    }),\n    ...mapActions('coupon', ['fetchActiveCoupons']),\n    formatDate(date) {\n      const options = {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    resetFilters() {\n      this.selectedFilter = '';\n      this.searchQuery = '';\n    },\n    editMember(member) {\n      this.setEditingMember(member);\n      this.$router.push('/memberedit');\n    },\n    async confirmDeleteMember(memberId) {\n      if (confirm('정말로 이 회원을 삭제하시겠습니까?')) {\n        await this.deleteMemberFromStore(memberId);\n        await this.fetchMembers();\n      }\n    },\n    genderText(gender) {\n      if (gender === 'F') return '여성';\n      if (gender === 'M') return '남성';\n      return '알 수 없음';\n    },\n    levelText(memberLevel) {\n      if (memberLevel === 'ADMIN') return '관리자';\n      if (memberLevel === 'USER') return '-';\n    },\n    async issueCoupon(member) {\n      const couponId = this.selectedCoupons[member.memberUniqueId];\n      if (!couponId) {\n        alert('쿠폰을 선택해주세요.');\n        return;\n      }\n      const ownedCoupon = {\n        memberUniqueId: member.memberUniqueId,\n        couponId,\n        issuedDate: new Date().toISOString(),\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n        couponUsed: false\n      };\n      console.log('발급 요청 데이터:', ownedCoupon); // 요청 데이터 확인용 로그\n\n      try {\n        await axios.post('/admin/ownedcoupons/create', ownedCoupon);\n        await axios.put(`/api/members/updateCouponIssued/${member.memberUniqueId}`, {\n          couponIssued: true\n        });\n        member.couponIssued = true;\n        this.$forceUpdate(); // 뷰 업데이트 강제 적용\n        alert('쿠폰이 발급되었습니다.');\n      } catch (error) {\n        console.error('쿠폰 발급 실패:', error);\n        alert('쿠폰 발급에 실패했습니다.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapGetters","axios","name","data","selectedFilter","searchQuery","selectedCoupons","computed","filteredMembers","members","query","toLowerCase","filter","member","includes","email","sort","a","b","Date","registrationDate","created","checkLoginStatus","fetchMembers","fetchActiveCoupons","methods","deleteMemberFromStore","setEditingMember","formatDate","date","options","year","month","day","toLocaleDateString","undefined","resetFilters","editMember","$router","push","confirmDeleteMember","memberId","confirm","genderText","gender","levelText","memberLevel","issueCoupon","couponId","memberUniqueId","alert","ownedCoupon","issuedDate","toISOString","expiryDate","now","couponUsed","console","log","post","put","couponIssued","$forceUpdate","error"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\MemberList.vue"],"sourcesContent":["<template>\n  <div class=\"main-container box-shadow\">\n    <h1 class=\"text-melon\">회원 목록</h1>\n    <div style=\"display: flex; align-items: center\">\n      <select style=\"width:150px;\" v-model=\"selectedFilter\">\n        <option value=\"\">- 선택 -</option>\n        <option value=\"memberName\">회원명</option>\n        <option value=\"email\">이메일</option>\n      </select>\n      <input v-model=\"searchQuery\" :disabled=\"!selectedFilter\" placeholder=\"검색어를 입력하세요\">\n      <button class=\"small-btn\" @click=\"resetFilters\">초기화</button>\n    </div>\n    <table class=\"line-table member-table\">\n      <thead>\n        <tr>\n          <th>회원명</th>\n          <th>이메일</th>\n          <th>휴대폰번호</th>\n          <th>성별</th>\n          <th>가입일</th>\n          <th>구독상태</th>\n          <th>레벨</th>\n          <th>쿠폰 발급</th>\n          <th>관리</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"member in filteredMembers\" :key=\"member.memberUniqueId\">\n          <td>{{ member.name }}</td>\n          <td>{{ member.email }}</td>\n          <td>{{ member.phoneNumber }}</td>\n          <td>{{ genderText(member.gender) }}</td>\n          <td>{{ formatDate(member.registrationDate) }}</td>\n          <td>{{ member.subscriptionStatus ? '구독중' : '-' }}</td>\n          <td>{{ levelText(member.memberLevel) }}</td>\n          <td>\n            <div v-if=\"!member.couponIssued\">\n              <select v-model=\"selectedCoupons[member.memberUniqueId]\">\n                <option value=\"\" disabled>-쿠폰 선택-</option>\n                <option v-for=\"coupon in activeCoupons\" :key=\"coupon.couponId\" :value=\"coupon.couponId\">{{ coupon.couponName }}</option>\n              </select>\n              <button @click=\"issueCoupon(member)\">발급</button>\n            </div>\n            <div v-else>\n              발급 완료\n            </div>\n          </td>\n          <td>\n            <button class=\"small-btn\" @click=\"editMember(member)\">수정</button>\n            <button class=\"small-btn\" @click=\"confirmDeleteMember(member.memberUniqueId)\">삭제</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\nimport axios from '../axios'; // axios 인스턴스 가져오기\n\nexport default {\n  name: 'AdminMemberList',\n  data() {\n    return {\n      selectedFilter: '',\n      searchQuery: '',\n      selectedCoupons: {}\n    };\n  },\n  computed: {\n    ...mapGetters('member', ['members']),\n    ...mapGetters('coupon', ['activeCoupons']),\n    filteredMembers() {\n      let members = this.members;\n\n      if (this.selectedFilter && this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n        members = members.filter(member => {\n          if (this.selectedFilter === 'memberName') {\n            return member.name && member.name.toLowerCase().includes(query);\n          } else if (this.selectedFilter === 'email') {\n            return member.email && member.email.toLowerCase().includes(query);\n          }\n          return true;\n        });\n      }\n\n      return members.sort((a, b) => new Date(b.registrationDate) - new Date(a.registrationDate));\n    }\n  },\n  async created() {\n    await this.checkLoginStatus();\n    await this.fetchMembers();\n    await this.fetchActiveCoupons();\n  },\n  methods: {\n    ...mapActions('member', {\n      checkLoginStatus: 'checkLoginStatus',\n      fetchMembers: 'fetchMembers',\n      deleteMemberFromStore: 'deleteMember',\n      setEditingMember: 'setEditingMember'\n    }),\n    ...mapActions('coupon', ['fetchActiveCoupons']),\n    formatDate(date) {\n      const options = { year: 'numeric', month: '2-digit', day: '2-digit' };\n      return new Date(date).toLocaleDateString(undefined, options);\n    },\n    resetFilters() {\n      this.selectedFilter = '';\n      this.searchQuery = '';\n    },\n    editMember(member) {\n      this.setEditingMember(member);\n      this.$router.push('/memberedit');\n    },\n    async confirmDeleteMember(memberId) {\n      if (confirm('정말로 이 회원을 삭제하시겠습니까?')) {\n        await this.deleteMemberFromStore(memberId);\n        await this.fetchMembers();\n      }\n    },\n    genderText(gender) {\n      if (gender === 'F') return '여성';\n      if (gender === 'M') return '남성';\n      return '알 수 없음';\n    },\n    levelText(memberLevel) {\n      if (memberLevel === 'ADMIN') return '관리자';\n      if (memberLevel === 'USER') return '-';\n    },\n    async issueCoupon(member) {\n      const couponId = this.selectedCoupons[member.memberUniqueId];\n      if (!couponId) {\n        alert('쿠폰을 선택해주세요.');\n        return;\n      }\n\n      const ownedCoupon = {\n        memberUniqueId: member.memberUniqueId,\n        couponId,\n        issuedDate: new Date().toISOString(),\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n        couponUsed: false\n      };\n      console.log('발급 요청 데이터:', ownedCoupon); // 요청 데이터 확인용 로그\n\n      try {\n        await axios.post('/admin/ownedcoupons/create', ownedCoupon);\n        await axios.put(`/api/members/updateCouponIssued/${member.memberUniqueId}`, { couponIssued: true });\n        member.couponIssued = true;\n        this.$forceUpdate(); // 뷰 업데이트 강제 적용\n        alert('쿠폰이 발급되었습니다.');\n      } catch (error) {\n        console.error('쿠폰 발급 실패:', error);\n        alert('쿠폰 발급에 실패했습니다.');\n      }\n    }\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}