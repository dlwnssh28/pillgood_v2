{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from '../axios';\nimport '../assets/styles.css';\nexport default {\n  data() {\n    return {\n      orders: [],\n      loading: true\n    };\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await axios.get('/api/orders/member');\n        this.orders = response.data.sort((a, b) => new Date(b.orderDate) - new Date(a.orderDate));\n      } catch (error) {\n        console.error('Failed to fetch orders:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async confirmPurchase(orderNo) {\n      try {\n        await axios.put(`/api/orders/update-status/${orderNo}`, {\n          status: '구매확정'\n        });\n        await this.fetchOrders();\n      } catch (error) {\n        console.error('Failed to confirm purchase:', error);\n      }\n    },\n    goToReturnPage(order) {\n      this.$router.push({\n        name: 'CancelPayment',\n        params: {\n          orderNo: order.orderNo\n        }\n      });\n    },\n    formatDate(dateString) {\n      const options = {\n        year: '2-digit',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n      const date = new Date(dateString);\n      return `${date.toLocaleDateString('ko-KR', options).replace(/\\./g, '.').replace(/\\s/g, '').slice(0, -1)} 주문`;\n    }\n  },\n  async created() {\n    await this.fetchOrders();\n  }\n};","map":{"version":3,"names":["axios","data","orders","loading","methods","fetchOrders","response","get","sort","a","b","Date","orderDate","error","console","confirmPurchase","orderNo","put","status","goToReturnPage","order","$router","push","name","params","formatDate","dateString","options","year","month","day","hour","minute","date","toLocaleDateString","replace","slice","created"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\OrderHistory.vue"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <h2 class=\"text-melon\">주문 내역</h2>\n    <div class=\"box-container-no-shade\">\n      <!-- 주문 리스트 -->\n      <div v-for=\"order in orders\" :key=\"order.orderNo\" class=\"box-container\">\n        <p style=\"text-align: left;\">\n          <span style=\"font-weight: bold; font-size: 20px;\">{{ order.orderStatus }}</span>\n          {{ order.orderNo }}\n          <span style=\"color:gray;\">{{ formatDate(order.orderDate) }}</span><br>\n        </p>\n        <p style=\"text-align: left;\">\n          <span style=\"font-size:20px;\">총액: {{ order.totalAmount }}원</span><br>\n          <router-link :to=\"{ name: 'OrderDetail', params: { orderNo: order.orderNo }}\">주문상세보기</router-link>\n        </p>\n        <div v-if=\"order.orderStatus !== '구매확정' && order.orderStatus !== '취소완료'\" class=\"btn-container\">\n          <button class=\"btn btn-green\" @click=\"confirmPurchase(order.orderNo)\">구매확정</button>\n          <button class=\"btn btn-gray\" @click=\"goToReturnPage(order)\">환불요청</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from '../axios';\nimport '../assets/styles.css';\n\nexport default {\n  data() {\n    return {\n      orders: [],\n      loading: true,\n    };\n  },\n  methods: {\n    async fetchOrders() {\n      try {\n        const response = await axios.get('/api/orders/member');\n        this.orders = response.data.sort((a, b) => new Date(b.orderDate) - new Date(a.orderDate));\n      } catch (error) {\n        console.error('Failed to fetch orders:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async confirmPurchase(orderNo) {\n      try {\n        await axios.put(`/api/orders/update-status/${orderNo}`, { status: '구매확정' });\n        await this.fetchOrders();\n      } catch (error) {\n        console.error('Failed to confirm purchase:', error);\n      }\n    },\n    goToReturnPage(order) {\n      this.$router.push({ name: 'CancelPayment', params: { orderNo: order.orderNo } });\n    },\n    formatDate(dateString) {\n      const options = { year: '2-digit', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit' };\n      const date = new Date(dateString);\n      return `${date.toLocaleDateString('ko-KR', options).replace(/\\./g, '.').replace(/\\s/g, '').slice(0, -1)} 주문`;\n    }\n  },\n  async created() {\n    await this.fetchOrders();\n  }\n};\n</script>\n\n<style scoped>\n.main-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.loading {\n  font-size: 20px;\n}\n\n.box-container {\n  margin-top: 20px;\n}\n\n.btn-container {\n  display: flex;\n  gap: 10px;\n}\n</style>\n"],"mappings":";AAyBA,OAAOA,KAAI,MAAO,UAAU;AAC5B,OAAO,sBAAsB;AAE7B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMN,KAAK,CAACO,GAAG,CAAC,oBAAoB,CAAC;QACtD,IAAI,CAACL,MAAK,GAAII,QAAQ,CAACL,IAAI,CAACO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,IAAI,IAAID,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAAC;MAC3F,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,UAAU;QACR,IAAI,CAACV,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IACD,MAAMY,eAAeA,CAACC,OAAO,EAAE;MAC7B,IAAI;QACF,MAAMhB,KAAK,CAACiB,GAAG,CAAC,6BAA6BD,OAAO,EAAE,EAAE;UAAEE,MAAM,EAAE;QAAO,CAAC,CAAC;QAC3E,MAAM,IAAI,CAACb,WAAW,CAAC,CAAC;MAC1B,EAAE,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IACDM,cAAcA,CAACC,KAAK,EAAE;MACpB,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC;QAAEC,IAAI,EAAE,eAAe;QAAEC,MAAM,EAAE;UAAER,OAAO,EAAEI,KAAK,CAACJ;QAAQ;MAAE,CAAC,CAAC;IAClF,CAAC;IACDS,UAAUA,CAACC,UAAU,EAAE;MACrB,MAAMC,OAAM,GAAI;QAAEC,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE,SAAS;QAAEC,GAAG,EAAE,SAAS;QAAEC,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAU,CAAC;MACzG,MAAMC,IAAG,GAAI,IAAItB,IAAI,CAACe,UAAU,CAAC;MACjC,OAAO,GAAGO,IAAI,CAACC,kBAAkB,CAAC,OAAO,EAAEP,OAAO,CAAC,CAACQ,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK;IAC9G;EACF,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAAChC,WAAW,CAAC,CAAC;EAC1B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}