{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"box-container box-shadow\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h4\", {\n  class: \"text-melon\"\n}, \"비밀번호 재설정\", -1);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"td\", null, [/*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"newPassword\",\n  class: \"text-melon\"\n}, \"새 비밀번호\")], -1);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"td\", null, [/*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"confirmPassword\",\n  class: \"text-melon\"\n}, \"새 비밀번호 확인\")], -1);\nconst _hoisted_5 = {\n  class: \"btn-container\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\",\n  class: \"btn btn-green\"\n}, \"비밀번호 재설정\", -1);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.handleResetPassword && $options.handleResetPassword(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"table\", null, [_createElementVNode(\"tr\", null, [_hoisted_3, _createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"newPassword\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newPassword = $event),\n    required: \"\"\n  }, null, 512), [[_vModelText, $data.newPassword]])])]), _createElementVNode(\"tr\", null, [_hoisted_4, _createElementVNode(\"td\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"confirmPassword\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.confirmPassword = $event),\n    required: \"\"\n  }, null, 512), [[_vModelText, $data.confirmPassword]])])])]), _createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _createVNode(_component_router_link, {\n    to: \"/login\",\n    class: \"btn btn-gray\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"로그인으로 돌아가기\")]),\n    _: 1\n  })])], 32)]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","type","_createElementBlock","_hoisted_1","_hoisted_2","onSubmit","_cache","_withModifiers","args","$options","handleResetPassword","_hoisted_3","id","$event","$data","newPassword","required","_hoisted_4","confirmPassword","_hoisted_5","_hoisted_6","_createVNode","_component_router_link","to","default","_withCtx","_createTextVNode","_"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\ChangePasswordView.vue"],"sourcesContent":["<template>\n  <div class=\"box-container box-shadow\">\n    <h4 class=\"text-melon\">비밀번호 재설정</h4>\n    <form @submit.prevent=\"handleResetPassword\">\n      <table>\n        <tr>\n          <td><label for=\"newPassword\" class=\"text-melon\">새 비밀번호</label></td>\n          <td><input type=\"password\" id=\"newPassword\" v-model=\"newPassword\" required /></td>\n        </tr>\n        <tr>\n          <td><label for=\"confirmPassword\" class=\"text-melon\">새 비밀번호 확인</label></td>\n          <td><input type=\"password\" id=\"confirmPassword\" v-model=\"confirmPassword\" required /></td>\n        </tr>\n      </table>\n      <div class=\"btn-container\">\n        <button type=\"submit\" class=\"btn btn-green\">비밀번호 재설정</button>\n        <router-link to=\"/login\" class=\"btn btn-gray\">로그인으로 돌아가기</router-link>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'ChangePasswordView',\n  data() {\n    return {\n      newPassword: '',\n      confirmPassword: '',\n      token: this.$route.query.token // URL 쿼리에서 토큰 가져오기\n    }\n  },\n  methods: {\n    async handleResetPassword() {\n      if (this.newPassword !== this.confirmPassword) {\n        alert('비밀번호가 일치하지 않습니다.');\n        return;\n      }\n      try {\n        await axios.post('/api/members/resetpassword', { token: this.token, newPassword: this.newPassword });\n        alert('비밀번호가 재설정되었습니다.');\n        this.$router.push('/login');\n      } catch (error) {\n        console.error('비밀번호 재설정 오류: ', error);\n        if (error.response && error.response.data) {\n          if (error.response.data === '비밀번호 재설정에 실패했습니다.') {\n            alert('토큰이 만료되었거나 유효하지 않습니다. 다시 시도해주세요.');\n          } else {\n            alert(error.response.data);\n          }\n        } else {\n          alert('비밀번호 재설정에 실패했습니다.');\n        }\n      }\n    }\n  }\n}\n</script>"],"mappings":";;EACOA,KAAK,EAAC;AAA0B;gCACnCC,mBAAA,CAAoC;EAAhCD,KAAK,EAAC;AAAY,GAAC,UAAQ;gCAIzBC,mBAAA,CAAmE,a,aAA/DA,mBAAA,CAA0D;EAAnDC,GAAG,EAAC,aAAa;EAACF,KAAK,EAAC;GAAa,QAAM,E;gCAItDC,mBAAA,CAA0E,a,aAAtEA,mBAAA,CAAiE;EAA1DC,GAAG,EAAC,iBAAiB;EAACF,KAAK,EAAC;GAAa,WAAS,E;;EAI5DA,KAAK,EAAC;AAAe;gCACxBC,mBAAA,CAA6D;EAArDE,IAAI,EAAC,QAAQ;EAACH,KAAK,EAAC;GAAgB,UAAQ;;;uBAd1DI,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJC,UAAoC,EACpCL,mBAAA,CAeO;IAfAM,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,mBAAA,IAAAD,QAAA,CAAAC,mBAAA,IAAAF,IAAA,CAAmB;MACxCT,mBAAA,CASQ,gBARNA,mBAAA,CAGK,aAFHY,UAAmE,EACnEZ,mBAAA,CAAkF,a,gBAA9EA,mBAAA,CAAyE;IAAlEE,IAAI,EAAC,UAAU;IAACW,EAAE,EAAC,aAAa;IAPrD,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAO+DC,KAAA,CAAAC,WAAW,GAAAF,MAAA;IAAEG,QAAQ,EAAR;gCAAbF,KAAA,CAAAC,WAAW,E,OAElEhB,mBAAA,CAGK,aAFHkB,UAA0E,EAC1ElB,mBAAA,CAA0F,a,gBAAtFA,mBAAA,CAAiF;IAA1EE,IAAI,EAAC,UAAU;IAACW,EAAE,EAAC,iBAAiB;IAXzD,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAWmEC,KAAA,CAAAI,eAAe,GAAAL,MAAA;IAAEG,QAAQ,EAAR;gCAAjBF,KAAA,CAAAI,eAAe,E,SAG5EnB,mBAAA,CAGM,OAHNoB,UAGM,GAFJC,UAA6D,EAC7DC,YAAA,CAAsEC,sBAAA;IAAzDC,EAAE,EAAC,QAAQ;IAACzB,KAAK,EAAC;;IAhBvC0B,OAAA,EAAAC,QAAA,CAgBsD,MAAU,CAhBhEC,gBAAA,CAgBsD,YAAU,E;IAhBhEC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}