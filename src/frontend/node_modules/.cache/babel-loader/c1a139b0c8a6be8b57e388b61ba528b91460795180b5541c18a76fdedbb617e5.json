{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from '../../axios'; // 설정된 axios 인스턴스 불러오기\n\nconst state = {\n  nutrientEfficiencies: [],\n  nutrients: []\n};\nconst mutations = {\n  setNutrientEfficiencies(state, nutrientEfficiencies) {\n    state.nutrientEfficiencies = nutrientEfficiencies;\n  },\n  setNutrients(state, nutrients) {\n    state.nutrients = nutrients;\n  },\n  removeNutrientEfficiency(state, id) {\n    state.nutrientEfficiencies = state.nutrientEfficiencies.filter(ne => ne.nutrientEfficiencyId !== id);\n  },\n  addNutrientEfficiency(state, nutrientEfficiency) {\n    state.nutrientEfficiencies.push(nutrientEfficiency);\n  }\n};\nconst actions = {\n  async fetchNutrientEfficiencies({\n    commit\n  }) {\n    try {\n      const response = await axios.get('/api/nutrientefficiencies/list');\n      if (response.status === 200) {\n        commit('setNutrientEfficiencies', response.data);\n      } else {\n        throw new Error('Failed to fetch nutrient efficiencies');\n      }\n    } catch (error) {\n      console.error('Error fetching nutrient efficiencies:', error);\n    }\n  },\n  async createNutrientEfficiency({\n    commit\n  }, nutrientEfficiency) {\n    try {\n      const response = await axios.post('/admin/nutrientefficiencies/create', nutrientEfficiency);\n      console.log('영양제 생성 서버 응답:', response);\n      if (response.status === 200) {\n        commit('addNutrientEfficiency', response.data);\n      } else {\n        throw new Error('Failed to create nutrient efficiency');\n      }\n    } catch (error) {\n      console.error('Error creating nutrient efficiency:', error);\n      throw error;\n    }\n  },\n  async createNutrient({\n    commit\n  }, nutrient) {\n    try {\n      const response = await axios.post('/admin/nutrients/create', nutrient);\n      if (response.status === 200) {\n        commit('addNutrient', response.data);\n        return response.data; // Return the newly created nutrient data\n      } else {\n        throw new Error('Failed to create nutrient');\n      }\n    } catch (error) {\n      console.error('Error creating nutrient:', error);\n      throw error;\n    }\n  },\n  async fetchNutrients({\n    commit\n  }) {\n    try {\n      const response = await axios.get('/api/nutrients/list');\n      if (response.status === 200) {\n        commit('setNutrients', response.data);\n      } else {\n        throw new Error('Failed to fetch nutrients');\n      }\n    } catch (error) {\n      console.error('Error fetching nutrients:', error);\n    }\n  },\n  async deleteNutrientEfficiency({\n    commit\n  }, id) {\n    try {\n      const response = await axios.delete(`/admin/nutrientefficiencies/delete/${id}`);\n      if (response.status === 200) {\n        commit('removeNutrientEfficiency', id);\n      }\n    } catch (error) {\n      console.error('Nutrient efficiency delete error:', error);\n      throw error;\n    }\n  }\n};\nconst getters = {\n  nutrientEfficiencies: state => state.nutrientEfficiencies,\n  nutrients: state => state.nutrients\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","state","nutrientEfficiencies","nutrients","mutations","setNutrientEfficiencies","setNutrients","removeNutrientEfficiency","id","filter","ne","nutrientEfficiencyId","addNutrientEfficiency","nutrientEfficiency","push","actions","fetchNutrientEfficiencies","commit","response","get","status","data","Error","error","console","createNutrientEfficiency","post","log","createNutrient","nutrient","fetchNutrients","deleteNutrientEfficiency","delete","getters","namespaced"],"sources":["C:/Users/woori/IdeaProjects/pillgood_v2/src/frontend/src/store/modules/nutrientStore.js"],"sourcesContent":["import axios from '../../axios'; // 설정된 axios 인스턴스 불러오기\n\nconst state = {\n  nutrientEfficiencies: [],\n  nutrients: []\n};\n\nconst mutations = {\n  setNutrientEfficiencies(state, nutrientEfficiencies) {\n    state.nutrientEfficiencies = nutrientEfficiencies;\n  },\n  setNutrients(state, nutrients) {\n    state.nutrients = nutrients;\n  },\n  removeNutrientEfficiency(state, id) {\n    state.nutrientEfficiencies = state.nutrientEfficiencies.filter(ne => ne.nutrientEfficiencyId !== id);\n  },\n  addNutrientEfficiency(state, nutrientEfficiency) {\n    state.nutrientEfficiencies.push(nutrientEfficiency);\n  }\n};\n\nconst actions = {\n  async fetchNutrientEfficiencies({ commit }) {\n    try {\n      const response = await axios.get('/api/nutrientefficiencies/list');\n      if (response.status === 200) {\n        commit('setNutrientEfficiencies', response.data);\n      } else {\n        throw new Error('Failed to fetch nutrient efficiencies');\n      }\n    } catch (error) {\n      console.error('Error fetching nutrient efficiencies:', error);\n    }\n  },\n  async createNutrientEfficiency({ commit }, nutrientEfficiency) {\n    try {\n      const response = await axios.post('/admin/nutrientefficiencies/create', nutrientEfficiency);\n      console.log('영양제 생성 서버 응답:', response)\n      if (response.status === 200) {\n        commit('addNutrientEfficiency', response.data);\n      } else {\n        throw new Error('Failed to create nutrient efficiency');\n      }\n    } catch (error) {\n      console.error('Error creating nutrient efficiency:', error);\n      throw error;\n    }\n  },\n  async createNutrient({ commit }, nutrient) {\n    try {\n      const response = await axios.post('/admin/nutrients/create', nutrient);\n      if (response.status === 200) {\n        commit('addNutrient', response.data);\n        return response.data; // Return the newly created nutrient data\n      } else {\n        throw new Error('Failed to create nutrient');\n      }\n    } catch (error) {\n      console.error('Error creating nutrient:', error);\n      throw error;\n    }\n  },\n  async fetchNutrients({ commit }) {\n    try {\n      const response = await axios.get('/api/nutrients/list');\n      if (response.status === 200) {\n        commit('setNutrients', response.data);\n      } else {\n        throw new Error('Failed to fetch nutrients');\n      }\n    } catch (error) {\n      console.error('Error fetching nutrients:', error);\n    }\n  },  \n  async deleteNutrientEfficiency({ commit }, id) {\n    try {\n      const response = await axios.delete(`/admin/nutrientefficiencies/delete/${id}`);\n      if (response.status === 200) {\n        commit('removeNutrientEfficiency', id);\n      }\n    } catch (error) {\n      console.error('Nutrient efficiency delete error:', error);\n      throw error;\n    }\n  }\n};\n\nconst getters = {\n  nutrientEfficiencies: state => state.nutrientEfficiencies,\n  nutrients: state => state.nutrients\n};\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}