{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"display\": \"block\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"attached-img\"\n};\nconst _hoisted_3 = [\"src\"];\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_QuillEditor = _resolveComponent(\"QuillEditor\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_QuillEditor, {\n    ref: \"quillEditor\",\n    modelValue: _ctx.content,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.content = $event),\n    options: _ctx.mergedEditorOptions,\n    style: {\n      \"min-height\": \"100px\"\n    }\n  }, null, 8, [\"modelValue\", \"options\"]), _createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.images, image => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: image.url,\n      class: \"attached-img-container\"\n    }, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"img\", {\n      src: image.url,\n      alt: \"Review Image\",\n      style: {\n        \"width\": \"100px\"\n      }\n    }, null, 8, _hoisted_3), _createElementVNode(\"button\", {\n      style: {\n        \"margin-top\": \"10px\"\n      },\n      class: \"small-btn\",\n      onClick: $event => _ctx.removeImage(image.name)\n    }, \"삭제\", 8, _hoisted_4)])]);\n  }), 128))])]);\n}","map":{"version":3,"names":["style","class","_createElementBlock","_createVNode","_component_QuillEditor","ref","modelValue","_ctx","content","_cache","$event","options","mergedEditorOptions","_createElementVNode","_hoisted_1","_Fragment","_renderList","images","image","key","url","_hoisted_2","src","alt","_hoisted_3","onClick","removeImage","name","_hoisted_4"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\components\\RichTextEditor.vue"],"sourcesContent":["<template>\n  <div>\n    <QuillEditor ref=\"quillEditor\" v-model=\"content\" :options=\"mergedEditorOptions\" style=\"min-height: 100px;\" />\n    <div style=\"display: block\">\n      <div v-for=\"image in images\" :key=\"image.url\" class=\"attached-img-container\">\n        <div class=\"attached-img\">\n          <img :src=\"image.url\" alt=\"Review Image\" style=\"width: 100px;\">\n          <button style=\"margin-top:10px;\" class=\"small-btn\" @click=\"removeImage(image.name)\">삭제</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, watch, defineComponent, onMounted, computed } from 'vue';\nimport { QuillEditor } from '@vueup/vue-quill';\nimport axios from '@/axios';\n\nexport default defineComponent({\n  name: 'RichTextEditor',\n  components: {\n    QuillEditor,\n  },\n  props: {\n    modelValue: {\n      type: String,\n      required: true,\n    },\n    editorOptions: {\n      type: Object,\n      default: () => ({}),\n    },\n  },\n  setup(props, { emit }) {\n    const content = ref(props.modelValue);\n    const quillEditor = ref(null);\n    const images = ref([]);\n\n    const defaultEditorOptions = {\n      placeholder: 'Write something...',\n      modules: {\n        toolbar: {\n          container: [\n            [{ header: [false] }, 'image'],\n          ],\n          handlers: {\n            image: () => {\n              const input = document.createElement('input');\n              input.setAttribute('type', 'file');\n              input.setAttribute('accept', 'image/*');\n              input.click();\n\n              input.onchange = async () => {\n                const file = input.files[0];\n                const fileName = decodeURIComponent(file.name);\n\n                const formData = new FormData();\n                formData.append('file', file);\n\n                if (!images.value.some((img) => decodeURIComponent(img.name) === fileName)) {\n                  try {\n                    const response = await axios.post('/api/upload/image', formData, {\n                      headers: {\n                        'Content-Type': 'multipart/form-data',\n                      },\n                    });\n\n                    const url = response.data;\n                    const imageUrl = url.startsWith('http') ? url : `http://localhost:9095${url}`;\n\n                    images.value.push({ url: imageUrl, name: file.name });\n\n                    if (quillEditor.value) {\n                      const quill = quillEditor.value.getQuill();\n                      const length = quill.getLength();\n                      quill.insertEmbed(length - 1, 'image', imageUrl);\n\n                      const img = quill.root.querySelector(`img[src=\"${imageUrl}\"]`);\n                      if (img) {\n                        img.style.display = 'none';\n                      }\n                    }\n\n                    updateContent();\n                  } catch (error) {\n                    console.error('이미지 업로드 실패:', error);\n                  }\n                }\n              };\n            },\n          },\n        },\n      },\n      ...props.editorOptions,\n    };\n\n    const mergedEditorOptions = computed(() => ({\n      ...defaultEditorOptions,\n      ...props.editorOptions,\n    }));\n\n    const removeImage = async (name) => {\n      const imageToRemove = images.value.find((img) => img.name === name);\n\n      if (imageToRemove) {\n        try {\n          await axios.delete(`/api/delete/image`, { data: { url: imageToRemove.url } });\n\n          images.value = images.value.filter((img) => img.name !== name);\n\n          if (quillEditor.value) {\n            const quill = quillEditor.value.getQuill();\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(quill.root.innerHTML, 'text/html');\n            const imgTags = doc.querySelectorAll('img');\n\n            imgTags.forEach((img) => {\n              if (img.src === imageToRemove.url) {\n                img.remove();\n              }\n            });\n\n            quill.root.innerHTML = doc.body.innerHTML;\n            updateContent();\n          }\n        } catch (error) {\n          console.error('Image delete failed:', error);\n        }\n      }\n    };\n\n    const updateContent = () => {\n      if (quillEditor.value) {\n        const quill = quillEditor.value.getQuill();\n        let contentHtml = quill.root.innerHTML;\n\n        content.value = contentHtml;\n        emit('update:modelValue', content.value);\n\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(content.value, 'text/html');\n        const imgTags = doc.querySelectorAll('img');\n        images.value = Array.from(imgTags).map((img) => ({\n          url: img.src,\n          name: decodeURIComponent(img.src.split('/').pop()),\n        }));\n      }\n    };\n\n    watch(content, (newValue) => {\n      emit('update:modelValue', newValue);\n    });\n\n    watch(\n      () => props.modelValue,\n      (newValue) => {\n        if (quillEditor.value) {\n          const quill = quillEditor.value.getQuill();\n          if (quill.root.innerHTML !== newValue) {\n            quill.root.innerHTML = newValue;\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(newValue, 'text/html');\n            const imgTags = doc.querySelectorAll('img');\n            images.value = Array.from(imgTags).map((img) => ({\n              url: img.src,\n              name: img.src.split('/').pop(),\n            }));\n          }\n        }\n        content.value = newValue;\n      }\n    );\n\n    onMounted(() => {\n      if (quillEditor.value) {\n        const quill = quillEditor.value.getQuill();\n\n        quill.on('text-change', () => {\n          content.value = quill.root.innerHTML;\n          emit('text-change', quill.getText().trim());\n        });\n\n        const observer = new MutationObserver(() => {\n          content.value = quill.root.innerHTML;\n        });\n\n        observer.observe(quill.root, {\n          childList: true,\n          subtree: true,\n          characterData: true,\n        });\n\n        quill.root.innerHTML = content.value;\n\n        const doc = new DOMParser().parseFromString(content.value, 'text/html');\n        const imgTags = doc.querySelectorAll('img');\n        images.value = Array.from(imgTags).map((img) => ({\n          url: img.src,\n          name: img.src.split('/').pop(),\n        }));\n      }\n    });\n\n    return {\n      content,\n      mergedEditorOptions,\n      quillEditor,\n      images,\n      removeImage,\n    };\n  },\n});\n</script>\n\n<style>\n.attached-img-container {\n  display: inline-block;\n  margin: 5px;\n  border-radius: 20px;\n  padding: 10px;\n}\n.attached-img {\n  display: inline-flex;\n  flex-direction: column;\n}\n</style>\n"],"mappings":";;EAGSA,KAAsB,EAAtB;IAAA;EAAA;AAAsB;;EAElBC,KAAK,EAAC;AAAc;mBALjC;mBAAA;;;uBACEC,mBAAA,CAUM,cATJC,YAAA,CAA6GC,sBAAA;IAAhGC,GAAG,EAAC,aAAa;IAFlCC,UAAA,EAE4CC,IAAA,CAAAC,OAAO;IAFnD,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAE4CH,IAAA,CAAAC,OAAO,GAAAE,MAAA;IAAGC,OAAO,EAAEJ,IAAA,CAAAK,mBAAmB;IAAEZ,KAA0B,EAA1B;MAAA;IAAA;0CAChFa,mBAAA,CAOM,OAPNC,UAOM,I,kBANJZ,mBAAA,CAKMa,SAAA,QATZC,WAAA,CAI2BT,IAAA,CAAAU,MAAM,EAAfC,KAAK;yBAAjBhB,mBAAA,CAKM;MALwBiB,GAAG,EAAED,KAAK,CAACE,GAAG;MAAEnB,KAAK,EAAC;QAClDY,mBAAA,CAGM,OAHNQ,UAGM,GAFJR,mBAAA,CAA+D;MAAzDS,GAAG,EAAEJ,KAAK,CAACE,GAAG;MAAEG,GAAG,EAAC,cAAc;MAACvB,KAAqB,EAArB;QAAA;MAAA;gBANnDwB,UAAA,GAOUX,mBAAA,CAA+F;MAAvFb,KAAwB,EAAxB;QAAA;MAAA,CAAwB;MAACC,KAAK,EAAC,WAAW;MAAEwB,OAAK,EAAAf,MAAA,IAAEH,IAAA,CAAAmB,WAAW,CAACR,KAAK,CAACS,IAAI;OAAG,IAAE,KAPhGC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}