{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4ec5fe18\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"chart-container\"\n};\nconst _hoisted_2 = {\n  ref: \"chartCanvas\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512)]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\components\\AgeGroupDeficiencyChart.vue"],"sourcesContent":["<template>\n  <div class=\"chart-container\">\n    <canvas ref=\"chartCanvas\"></canvas>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch } from 'vue';\nimport { useStore } from 'vuex';\nimport Chart from 'chart.js/auto';\n\nexport default {\n  name: 'AgeGroupDeficiencyChart',\n  props: {\n    userAge: {\n      type: Number,\n      required: true\n    }\n  },\n  setup(props) {\n    const chartCanvas = ref(null);\n    const store = useStore();\n    let chartInstance = null;\n\n    const getAgeGroup = (age) => {\n      if (age < 20) return '10-19';\n      if (age < 30) return '20-29';\n      if (age < 40) return '30-39';\n      if (age < 50) return '40-49';\n      if (age < 60) return '50-59';\n      return '60+';\n    };\n\n    const createChart = (data) => {\n      const ctx = chartCanvas.value.getContext('2d');\n      const ageGroup = getAgeGroup(props.userAge);\n      const filteredData = data.filter(item => item[0] === ageGroup);\n\n      if (filteredData.length === 0) {\n        console.warn(`No data available for age group: ${ageGroup}`);\n        return;\n      }\n\n      // 결핍 유형별 총 인원 수를 계산하고 정렬\n      const deficiencyCounts = filteredData.reduce((acc, item) => {\n        const deficiency = item[1];\n        const count = item[2];\n        if (!acc[deficiency]) {\n          acc[deficiency] = 0;\n        }\n        acc[deficiency] += count;\n        return acc;\n      }, {});\n\n      // 상위 세 개 항목 선택\n      const topDeficiencies = Object.entries(deficiencyCounts)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 3);\n\n      const deficiencies = topDeficiencies.map(item => item[0]);\n      const counts = topDeficiencies.map(item => item[1]);\n\n      if (chartInstance) {\n        chartInstance.destroy();\n      }\n\n      chartInstance = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: deficiencies,\n          datasets: [{\n            label: `Age Group: ${ageGroup}`,\n            data: counts,\n            backgroundColor: deficiencies.map(() => `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.5)`),\n            borderColor: deficiencies.map(() => `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 1)`),\n            borderWidth: 1\n          }]\n        },\n        options: {\n          indexAxis: 'y', // 가로 막대형 차트로 변경\n          scales: {\n            x: {\n              beginAtZero: true,\n              ticks: {\n                stepSize: 1\n              },\n              title: {\n                display: true,\n                text: '인원 수 (명)'\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: '결핍 유형'\n              }\n            }\n          }\n        }\n      });\n    };\n\n    const loadDataAndCreateChart = () => {\n      const data = store.getters['survey/ageGroupDeficiencyData'];\n      if (data.length) {\n        createChart(data);\n      } else {\n        console.error('차트를 생성할 데이터가 없습니다.');\n      }\n    };\n\n    onMounted(() => {\n      store.dispatch('survey/fetchAgeGroupDeficiencyData').then(() => {\n        loadDataAndCreateChart();\n      });\n    });\n\n    watch(() => props.userAge, () => {\n      loadDataAndCreateChart();\n    });\n\n    return {\n      chartCanvas\n    };\n  }\n};\n</script>\n\n<style scoped>\n.chart-container {\n  position: relative;\n  height: 500px; /* 차트 높이 조정 */\n  width: 100%;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAiB;;EAClBC,GAAG,EAAC;AAAa;;uBAD3BC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAmC,UAAnCC,UAAmC,a","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}