{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from '../../axios'; // 설정된 axios 인스턴스 불러오기\n\nconst state = {\n  cartItems: [] // 장바구니 항목을 저장할 상태\n};\nconst mutations = {\n  setCartItems(state, cartItems) {\n    state.cartItems = cartItems;\n  },\n  updateCartItemQuantity(state, {\n    cartNo,\n    productQuantity\n  }) {\n    const item = state.cartItems.find(item => item.cartNo === cartNo);\n    if (item) {\n      item.productQuantity = productQuantity;\n    }\n  },\n  clearCartItems(state) {\n    state.cartItems = [];\n  },\n  addCartItem(state, cartItem) {\n    state.cartItems.push(cartItem);\n  }\n};\nconst actions = {\n  async fetchCartItems({\n    commit\n  }) {\n    try {\n      const response = await axios.get('/api/carts/findbyid', {\n        withCredentials: true\n      });\n      commit('setCartItems', response.data);\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        console.log('장바구니가 비어있습니다.');\n        commit('clearCartItems'); // 장바구니 비워짐 상태로 설정\n      } else {\n        console.error('장바구니 항목 불러오기 에러: ', error);\n      }\n    }\n  },\n  async updateCartItem({\n    commit\n  }, item) {\n    try {\n      await axios.put(`/api/carts/update/${item.cartNo}`, {\n        ...item\n      });\n      commit('updateCartItemQuantity', {\n        cartNo: item.cartNo,\n        productQuantity: item.productQuantity\n      });\n    } catch (error) {\n      console.error('장바구니 항목 업데이트 에러:', error);\n    }\n  },\n  async deleteCartItem({\n    commit\n  }, cartNo) {\n    try {\n      await axios.delete(`/api/carts/delete/${cartNo}`);\n      commit('removeCartItem', cartNo);\n    } catch (error) {\n      console.error('장바구니 항목 삭제 에러:', error);\n    }\n  },\n  async addToCart({\n    commit\n  }, cartItem) {\n    try {\n      const response = await axios.post('/api/carts/create', cartItem, {\n        withCredentials: true\n      });\n      if (response.status === 201) {\n        commit('addCartItem', response.data);\n        return response;\n      } else {\n        console.error('장바구니 추가 실패:', response);\n        return response;\n      }\n    } catch (error) {\n      console.error('장바구니 항목 추가 에러:', error);\n      throw error;\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axios","state","cartItems","mutations","setCartItems","updateCartItemQuantity","cartNo","productQuantity","item","find","clearCartItems","addCartItem","cartItem","push","actions","fetchCartItems","commit","response","get","withCredentials","data","error","status","console","log","updateCartItem","put","deleteCartItem","delete","addToCart","post","namespaced"],"sources":["C:/Users/woori/IdeaProjects/pillgood_v2/src/frontend/src/store/modules/cartStore.js"],"sourcesContent":["import axios from '../../axios'; // 설정된 axios 인스턴스 불러오기\n\nconst state = {\n  cartItems: [] // 장바구니 항목을 저장할 상태\n};\n\nconst mutations = {\n  setCartItems(state, cartItems) {\n    state.cartItems = cartItems;\n  },\n  updateCartItemQuantity(state, { cartNo, productQuantity }) {\n    const item = state.cartItems.find(item => item.cartNo === cartNo);\n    if (item) {\n      item.productQuantity = productQuantity;\n    }\n  },\n  clearCartItems(state) {\n    state.cartItems = [];\n  },\n  addCartItem(state, cartItem) {\n    state.cartItems.push(cartItem);\n  }\n};\n\nconst actions = {\n  async fetchCartItems({ commit }) {\n    try {\n      const response = await axios.get('/api/carts/findbyid', { withCredentials: true });\n      commit('setCartItems', response.data);\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        console.log('장바구니가 비어있습니다.');\n        commit('clearCartItems'); // 장바구니 비워짐 상태로 설정\n      } else {\n        console.error('장바구니 항목 불러오기 에러: ', error);\n      }\n    }\n  },\n  async updateCartItem({ commit }, item) {\n    try {\n      await axios.put(`/api/carts/update/${item.cartNo}`, {\n        ...item\n      });\n      commit('updateCartItemQuantity', { cartNo: item.cartNo, productQuantity: item.productQuantity });\n    } catch (error) {\n      console.error('장바구니 항목 업데이트 에러:', error);\n    }\n  },\n  async deleteCartItem({ commit }, cartNo) {\n    try {\n      await axios.delete(`/api/carts/delete/${cartNo}`);\n      commit('removeCartItem', cartNo);\n    } catch (error) {\n      console.error('장바구니 항목 삭제 에러:', error);\n    }\n  },\n  async addToCart({ commit }, cartItem) {\n    try {\n      const response = await axios.post('/api/carts/create', cartItem, { withCredentials: true });\n      if (response.status === 201) {\n        commit('addCartItem', response.data);\n        return response;\n      } else {\n        console.error('장바구니 추가 실패:', response);\n        return response;\n      }\n    } catch (error) {\n      console.error('장바구니 항목 추가 에러:', error);\n      throw error;\n    }\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}