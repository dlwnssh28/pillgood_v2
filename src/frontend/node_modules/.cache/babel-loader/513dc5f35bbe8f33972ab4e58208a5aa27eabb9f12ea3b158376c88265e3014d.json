{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapGetters } from 'vuex';\nimport RichTextEditor from '@/components/RichTextEditor.vue'; // RichTextEditor 컴포넌트 임포트\n\nexport default {\n  name: 'NoticeEdit',\n  components: {\n    RichTextEditor // RichTextEditor 컴포넌트 등록\n  },\n  data() {\n    return {\n      noticeTitle: '',\n      noticeContent: ''\n    };\n  },\n  computed: {\n    ...mapGetters('notice', ['notice'])\n  },\n  watch: {\n    notice(newNotice) {\n      if (newNotice) {\n        this.noticeTitle = newNotice.noticeTitle;\n        this.noticeContent = newNotice.noticeContent;\n      }\n    }\n  },\n  created() {\n    this.loadNotice();\n  },\n  methods: {\n    ...mapActions('notice', ['fetchNotice', 'updateNotice']),\n    async loadNotice() {\n      try {\n        await this.fetchNotice(this.$route.params.id);\n      } catch (error) {\n        console.error('Failed to fetch notice:', error);\n      }\n    },\n    async submitNoticeUpdate() {\n      try {\n        await this.updateNotice({\n          id: this.$route.params.id,\n          noticeTitle: this.noticeTitle,\n          noticeContent: this.noticeContent\n        });\n        this.$router.push('/noticelist');\n      } catch (error) {\n        console.error('Failed to update notice:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapGetters","RichTextEditor","name","components","data","noticeTitle","noticeContent","computed","watch","notice","newNotice","created","loadNotice","methods","fetchNotice","$route","params","id","error","console","submitNoticeUpdate","updateNotice","$router","push"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\NoticeEdit.vue"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <h1 class=\"text-melon\">게시글 수정</h1>\n    <form @submit.prevent=\"submitNoticeUpdate\">\n      <table>\n        <tr>\n          <td>제목:</td>\n          <td><input v-model=\"noticeTitle\" type=\"text\" required /></td>\n        </tr>\n        <tr>\n          <td>내용 (Quill 에디터):</td>\n          <td>\n            <RichTextEditor v-model=\"noticeContent\" />\n          </td>\n        </tr>\n      </table>\n      <div class=\"btn-container\">\n        <button type=\"submit\" class=\"btn btn-green\">Update Notice</button>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\nimport RichTextEditor from '@/components/RichTextEditor.vue'; // RichTextEditor 컴포넌트 임포트\n\nexport default {\n  name: 'NoticeEdit',\n  components: {\n    RichTextEditor // RichTextEditor 컴포넌트 등록\n  },\n  data() {\n    return {\n      noticeTitle: '',\n      noticeContent: ''\n    };\n  },\n  computed: {\n    ...mapGetters('notice', ['notice'])\n  },\n  watch: {\n    notice(newNotice) {\n      if (newNotice) {\n        this.noticeTitle = newNotice.noticeTitle;\n        this.noticeContent = newNotice.noticeContent;\n      }\n    }\n  },\n  created() {\n    this.loadNotice();\n  },\n  methods: {\n    ...mapActions('notice', ['fetchNotice', 'updateNotice']),\n    async loadNotice() {\n      try {\n        await this.fetchNotice(this.$route.params.id);\n      } catch (error) {\n        console.error('Failed to fetch notice:', error);\n      }\n    },\n    async submitNoticeUpdate() {\n      try {\n        await this.updateNotice({ id: this.$route.params.id, noticeTitle: this.noticeTitle, noticeContent: this.noticeContent });\n        this.$router.push('/noticelist');\n      } catch (error) {\n        console.error('Failed to update notice:', error);\n      }\n    }\n  }\n};\n</script>\n\n<style src=\"../assets/styles.css\"></style>\n"],"mappings":";AAwBA,SAASA,UAAU,EAAEC,UAAS,QAAS,MAAM;AAC7C,OAAOC,cAAa,MAAO,iCAAiC,EAAE;;AAE9D,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,UAAU,EAAE;IACVF,cAAa,CAAE;EACjB,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MACfC,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGP,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;EACpC,CAAC;EACDQ,KAAK,EAAE;IACLC,MAAMA,CAACC,SAAS,EAAE;MAChB,IAAIA,SAAS,EAAE;QACb,IAAI,CAACL,WAAU,GAAIK,SAAS,CAACL,WAAW;QACxC,IAAI,CAACC,aAAY,GAAII,SAAS,CAACJ,aAAa;MAC9C;IACF;EACF,CAAC;EACDK,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACP,GAAGd,UAAU,CAAC,QAAQ,EAAE,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;IACxD,MAAMa,UAAUA,CAAA,EAAG;MACjB,IAAI;QACF,MAAM,IAAI,CAACE,WAAW,CAAC,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE,CAAC;MAC/C,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IACD,MAAME,kBAAkBA,CAAA,EAAG;MACzB,IAAI;QACF,MAAM,IAAI,CAACC,YAAY,CAAC;UAAEJ,EAAE,EAAE,IAAI,CAACF,MAAM,CAACC,MAAM,CAACC,EAAE;UAAEZ,WAAW,EAAE,IAAI,CAACA,WAAW;UAAEC,aAAa,EAAE,IAAI,CAACA;QAAc,CAAC,CAAC;QACxH,IAAI,CAACgB,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC;MAClC,EAAE,OAAOL,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}