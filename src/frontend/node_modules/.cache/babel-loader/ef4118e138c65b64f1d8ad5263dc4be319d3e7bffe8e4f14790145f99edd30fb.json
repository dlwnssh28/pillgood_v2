{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from '../../axios'; // axios 모듈 경로 수정\n\nconst state = {\n  refunds: []\n};\nconst getters = {\n  refunds: state => state.refunds\n};\nconst actions = {\n  async createRefund({\n    commit\n  }, refundData) {\n    try {\n      const response = await axios.post('/api/refunds/create', refundData);\n      if (response.status === 201) {\n        commit('addRefund', response.data);\n        console.log('환불 정보가 성공적으로 저장되었습니다:', response.data);\n      } else {\n        console.error('환불 정보 저장에 실패했습니다:', response.data);\n      }\n    } catch (error) {\n      console.error('환불 정보 저장 중 오류가 발생했습니다:', error);\n    }\n  },\n  async fetchRefunds({\n    commit\n  }, orderNo) {\n    // orderNo 파라미터 추가\n    try {\n      const response = await axios.get(`/api/refunds/order/${orderNo}`); // orderNo 사용\n      commit('setRefunds', response.data);\n    } catch (error) {\n      console.error('환불 목록을 가져오는 중 오류가 발생했습니다:', error);\n    }\n  }\n};\nconst mutations = {\n  addRefund: (state, refund) => state.refunds.push(refund),\n  setRefunds: (state, refunds) => state.refunds = refunds\n};\nexport default {\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["axios","state","refunds","getters","actions","createRefund","commit","refundData","response","post","status","data","console","log","error","fetchRefunds","orderNo","get","mutations","addRefund","refund","push","setRefunds"],"sources":["C:/Users/woori/IdeaProjects/pillgood_v2/src/frontend/src/store/modules/refunds.js"],"sourcesContent":["import axios from '../../axios'; // axios 모듈 경로 수정\n\nconst state = {\n  refunds: [],\n};\n\nconst getters = {\n  refunds: state => state.refunds,\n};\n\nconst actions = {\n  async createRefund({ commit }, refundData) {\n    try {\n      const response = await axios.post('/api/refunds/create', refundData);\n      if (response.status === 201) {\n        commit('addRefund', response.data);\n        console.log('환불 정보가 성공적으로 저장되었습니다:', response.data);\n      } else {\n        console.error('환불 정보 저장에 실패했습니다:', response.data);\n      }\n    } catch (error) {\n      console.error('환불 정보 저장 중 오류가 발생했습니다:', error);\n    }\n  },\n  async fetchRefunds({ commit }, orderNo) { // orderNo 파라미터 추가\n    try {\n      const response = await axios.get(`/api/refunds/order/${orderNo}`); // orderNo 사용\n      commit('setRefunds', response.data);\n    } catch (error) {\n      console.error('환불 목록을 가져오는 중 오류가 발생했습니다:', error);\n    }\n  },\n};\n\nconst mutations = {\n  addRefund: (state, refund) => state.refunds.push(refund),\n  setRefunds: (state, refunds) => state.refunds = refunds,\n};\n\nexport default {\n  state,\n  getters,\n  actions,\n  mutations,\n};\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,aAAa,CAAC,CAAC;;AAEjC,MAAMC,KAAK,GAAG;EACZC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,OAAO,GAAG;EACdD,OAAO,EAAED,KAAK,IAAIA,KAAK,CAACC;AAC1B,CAAC;AAED,MAAME,OAAO,GAAG;EACd,MAAMC,YAAYA,CAAC;IAAEC;EAAO,CAAC,EAAEC,UAAU,EAAE;IACzC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,qBAAqB,EAAEF,UAAU,CAAC;MACpE,IAAIC,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3BJ,MAAM,CAAC,WAAW,EAAEE,QAAQ,CAACG,IAAI,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEL,QAAQ,CAACG,IAAI,CAAC;MACrD,CAAC,MAAM;QACLC,OAAO,CAACE,KAAK,CAAC,mBAAmB,EAAEN,QAAQ,CAACG,IAAI,CAAC;MACnD;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EACD,MAAMC,YAAYA,CAAC;IAAET;EAAO,CAAC,EAAEU,OAAO,EAAE;IAAE;IACxC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMR,KAAK,CAACiB,GAAG,CAAC,sBAAsBD,OAAO,EAAE,CAAC,CAAC,CAAC;MACnEV,MAAM,CAAC,YAAY,EAAEE,QAAQ,CAACG,IAAI,CAAC;IACrC,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF;AACF,CAAC;AAED,MAAMI,SAAS,GAAG;EAChBC,SAAS,EAAEA,CAAClB,KAAK,EAAEmB,MAAM,KAAKnB,KAAK,CAACC,OAAO,CAACmB,IAAI,CAACD,MAAM,CAAC;EACxDE,UAAU,EAAEA,CAACrB,KAAK,EAAEC,OAAO,KAAKD,KAAK,CAACC,OAAO,GAAGA;AAClD,CAAC;AAED,eAAe;EACbD,KAAK;EACLE,OAAO;EACPC,OAAO;EACPc;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}