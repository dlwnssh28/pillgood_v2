{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from '../../axios'; // 설정된 axios 인스턴스 불러오기\n\nconst state = {\n  notices: [],\n  notice: null,\n  totalNotices: 0,\n  // 전체 공지사항 개수 추가\n  pageSize: 10,\n  currentPage: 0 // 현재 페이지 추가\n};\nconst getters = {\n  notices: state => state.notices,\n  notice: state => state.notice,\n  totalNotices: state => state.totalNotices,\n  totalPages: state => Math.ceil(state.totalNotices / state.pageSize),\n  // 총 페이지 수 계산\n  currentPage: state => state.currentPage // 현재 페이지 getter 추가\n};\nconst actions = {\n  // 공지사항 목록 조회\n  async fetchNotices({\n    commit\n  }, {\n    page = 0,\n    size = 10\n  } = {}) {\n    try {\n      const response = await axios.get('/api/notices', {\n        params: {\n          page,\n          size\n        }\n      });\n      if (response.status === 200) {\n        commit('setNotices', response.data.content);\n        commit('setTotalNotices', response.data.totalElements);\n        commit('setCurrentPage', page);\n        console.log('공지사항 조회 성공:', response.data);\n      } else {\n        console.error('공지사항 조회 실패:', response.data);\n        throw new Error('공지사항 조회 실패');\n      }\n    } catch (error) {\n      console.error('공지사항 조회 에러:', error);\n      throw error;\n    }\n  },\n  // 개별 공지사항 조회\n  async fetchNotice({\n    commit\n  }, noticeId) {\n    try {\n      const response = await axios.get(`/api/notices/${noticeId}`);\n      if (response.status === 200) {\n        commit('setNotice', response.data);\n        console.log('공지사항 개별 조회 성공:', response.data);\n        return response; // 데이터를 반환\n      } else {\n        console.error('공지사항 개별 조회 실패:', response.data);\n        throw new Error('공지사항 개별 조회 실패');\n      }\n    } catch (error) {\n      console.error('공지사항 개별 조회 에러:', error);\n      throw error;\n    }\n  },\n  // 공지사항 생성\n  async createNotice({\n    dispatch\n  }, notice) {\n    try {\n      const response = await axios.post('/admin/notices/create', notice);\n      if (response.status === 201) {\n        console.log('공지사항 생성 성공:', response.data);\n        dispatch('fetchNotices', {\n          page: state.currentPage,\n          size: state.pageSize\n        }); // 공지사항 목록을 새로고침\n      } else {\n        console.error('공지사항 생성 실패:', response.data);\n        throw new Error('공지사항 생성 실패');\n      }\n    } catch (error) {\n      console.error('공지사항 생성 에러:', error);\n      throw error;\n    }\n  },\n  // 공지사항 수정\n  async updateNotice({\n    dispatch\n  }, notice) {\n    try {\n      const response = await axios.put(`/admin/notices/update/${notice.id}`, notice);\n      if (response.status === 200) {\n        dispatch('fetchNotices', {\n          page: state.currentPage,\n          size: state.pageSize\n        });\n        console.log('공지사항 수정 성공:', response.data);\n      } else {\n        console.error('공지사항 수정 실패:', response.data);\n        throw new Error('공지사항 수정 실패');\n      }\n    } catch (error) {\n      console.error('공지사항 수정 에러:', error);\n      throw error;\n    }\n  },\n  // 공지사항 삭제\n  async deleteNotice({\n    dispatch\n  }, noticeNo) {\n    try {\n      const response = await axios.delete(`/admin/notices/delete/${noticeNo}`);\n      if (response.status === 204) {\n        dispatch('fetchNotices', {\n          page: state.currentPage,\n          size: state.pageSize\n        });\n        console.log('공지사항 삭제 성공');\n      } else {\n        console.error('공지사항 삭제 실패:', response.data);\n        throw new Error('공지사항 삭제 실패');\n      }\n    } catch (error) {\n      console.error('공지사항 삭제 에러:', error);\n      throw error;\n    }\n  },\n  // 공지사항 제목으로 검색\n  async searchNoticeByTitle(_, title) {\n    try {\n      const response = await axios.get(`/api/notices/search?title=${title}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to search notice:', error);\n      throw error;\n    }\n  }\n};\nconst mutations = {\n  setNotices: (state, notices) => {\n    state.notices = notices;\n  },\n  setNotice: (state, notice) => {\n    state.notice = notice;\n  },\n  setTotalNotices: (state, total) => {\n    state.totalNotices = total;\n  },\n  setCurrentPage: (state, page) => {\n    state.currentPage = page;\n  },\n  addNotice: (state, notice) => {\n    state.notices.push(notice);\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["axios","state","notices","notice","totalNotices","pageSize","currentPage","getters","totalPages","Math","ceil","actions","fetchNotices","commit","page","size","response","get","params","status","data","content","totalElements","console","log","error","Error","fetchNotice","noticeId","createNotice","dispatch","post","updateNotice","put","id","deleteNotice","noticeNo","delete","searchNoticeByTitle","_","title","mutations","setNotices","setNotice","setTotalNotices","total","setCurrentPage","addNotice","push","namespaced"],"sources":["C:/Users/woori/IdeaProjects/pillgood_v2/src/frontend/src/store/modules/notice.js"],"sourcesContent":["import axios from '../../axios'; // 설정된 axios 인스턴스 불러오기\n\nconst state = {\n  notices: [],\n  notice: null,\n  totalNotices: 0, // 전체 공지사항 개수 추가\n  pageSize: 10,\n  currentPage: 0 // 현재 페이지 추가\n};\n\nconst getters = {\n  notices: state => state.notices,\n  notice: state => state.notice,\n  totalNotices: state => state.totalNotices,\n  totalPages: state => Math.ceil(state.totalNotices / state.pageSize), // 총 페이지 수 계산\n  currentPage: state => state.currentPage // 현재 페이지 getter 추가\n};\n\nconst actions = {\n  // 공지사항 목록 조회\n  async fetchNotices({ commit }, { page = 0, size = 10 } = {}) {\n    try {\n      const response = await axios.get('/api/notices', {\n        params: { page, size }\n      });\n      if (response.status === 200) {\n        commit('setNotices', response.data.content);\n        commit('setTotalNotices', response.data.totalElements);\n        commit('setCurrentPage', page);\n        console.log('공지사항 조회 성공:', response.data);\n      } else {\n        console.error('공지사항 조회 실패:', response.data);\n        throw new Error('공지사항 조회 실패');\n      }\n    } catch (error) {\n      console.error('공지사항 조회 에러:', error);\n      throw error;\n    }\n  },\n  \n  // 개별 공지사항 조회\n  async fetchNotice({ commit }, noticeId) {\n    try {\n      const response = await axios.get(`/api/notices/${noticeId}`);\n      if (response.status === 200) {\n        commit('setNotice', response.data);\n        console.log('공지사항 개별 조회 성공:', response.data);\n        return response; // 데이터를 반환\n      } else {\n        console.error('공지사항 개별 조회 실패:', response.data);\n        throw new Error('공지사항 개별 조회 실패');\n      }\n    } catch (error) {\n      console.error('공지사항 개별 조회 에러:', error);\n      throw error;\n    }\n  },\n  \n  // 공지사항 생성\n  async createNotice({ dispatch }, notice) {\n    try {\n      const response = await axios.post('/admin/notices/create', notice);\n      if (response.status === 201) {\n        console.log('공지사항 생성 성공:', response.data);\n        dispatch('fetchNotices', { page: state.currentPage, size: state.pageSize }); // 공지사항 목록을 새로고침\n      } else {\n        console.error('공지사항 생성 실패:', response.data);\n        throw new Error('공지사항 생성 실패');\n      }\n    } catch (error) {\n      console.error('공지사항 생성 에러:', error);\n      throw error;\n    }\n  },\n  \n  // 공지사항 수정\n  async updateNotice({ dispatch }, notice) {\n    try {\n      const response = await axios.put(`/admin/notices/update/${notice.id}`, notice);\n      if (response.status === 200) {\n        dispatch('fetchNotices', { page: state.currentPage, size: state.pageSize });\n        console.log('공지사항 수정 성공:', response.data);\n      } else {\n        console.error('공지사항 수정 실패:', response.data);\n        throw new Error('공지사항 수정 실패');\n      }\n    } catch (error) {\n      console.error('공지사항 수정 에러:', error);\n      throw error;\n    }\n  },\n  \n  // 공지사항 삭제\n  async deleteNotice({ dispatch }, noticeNo) {\n    try {\n      const response = await axios.delete(`/admin/notices/delete/${noticeNo}`);\n      if (response.status === 204) {\n        dispatch('fetchNotices', { page: state.currentPage, size: state.pageSize });\n        console.log('공지사항 삭제 성공');\n      } else {\n        console.error('공지사항 삭제 실패:', response.data);\n        throw new Error('공지사항 삭제 실패');\n      }\n    } catch (error) {\n      console.error('공지사항 삭제 에러:', error);\n      throw error;\n    }\n  },\n  \n  // 공지사항 제목으로 검색\n  async searchNoticeByTitle(_, title) {\n    try {\n      const response = await axios.get(`/api/notices/search?title=${title}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to search notice:', error);\n      throw error;\n    }\n  }\n};\n\nconst mutations = {\n  setNotices: (state, notices) => {\n    state.notices = notices;\n  },\n  setNotice: (state, notice) => {\n    state.notice = notice;\n  },\n  setTotalNotices: (state, total) => {\n    state.totalNotices = total;\n  },\n  setCurrentPage: (state, page) => {\n    state.currentPage = page;\n  },\n  addNotice: (state, notice) => {\n    state.notices.push(notice);\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}