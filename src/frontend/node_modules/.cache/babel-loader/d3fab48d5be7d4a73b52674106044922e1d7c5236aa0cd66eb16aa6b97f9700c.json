{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nexport default {\n  name: 'SurveyPage',\n  setup() {\n    const router = useRouter();\n    const store = useStore();\n    const isLoading = computed(() => store.state.survey.isLoading);\n    const survey = computed(() => store.state.survey.survey || {});\n    const currentStep = computed(() => store.state.survey.currentStep);\n    const currentQuestionIndex = computed(() => store.state.survey.currentQuestionIndex);\n    const currentDetailedQuestionIndex = computed(() => store.state.survey.currentDetailedQuestionIndex);\n    const currentDetailedQuestionsGroup = computed(() => store.getters['survey/currentDetailedQuestionsGroup']);\n    const selectedAnswers = computed(() => store.state.survey.selectedAnswers);\n    const detailedAnswers = computed(() => store.state.survey.detailedAnswers);\n    const currentQuestion = computed(() => store.getters['survey/currentQuestion']);\n    const isLastQuestion = computed(() => store.getters['survey/isLastQuestion']);\n    const isLastDetailedQuestionsGroup = computed(() => store.getters['survey/isLastDetailedQuestionsGroup']);\n    const canProceed = computed(() => store.getters['survey/canProceed']);\n    const isPersonalInfoComplete = computed(() => store.getters['survey/isPersonalInfoComplete']);\n    const isLoggedIn = computed(() => store.state.member.isLoggedIn);\n    onMounted(async () => {\n      if (!isLoggedIn.value) {\n        router.push('/login');\n        return;\n      }\n      await store.dispatch('survey/loadSurveyData');\n    });\n    const getAnswersForQuestion = questionId => {\n      return store.state.survey.surveyAnswers.filter(answer => answer.questionId === questionId);\n    };\n    const nextStep = () => {\n      console.log('Next Step clicked'); // 디버그 로그 추가\n      store.dispatch('survey/nextStep');\n    };\n    const previousStep = () => {\n      console.log('Previous Step clicked'); // 디버그 로그 추가\n      store.dispatch('survey/previousStep');\n    };\n    const handleAnswerSelection = payload => {\n      console.log('Answer selected:', payload.questionId, payload.answerId); // 디버그 로그 추가\n      store.dispatch('survey/handleAnswerSelection', payload);\n    };\n    const finishSurvey = async () => {\n      console.log('SurveyPage.vue - memberId:', store.state.member.memberId);\n      console.log('Finish Survey clicked'); // 디버그 로그 추가\n\n      await store.dispatch('survey/finishSurvey');\n      goToSurveyResult();\n    };\n    const goToSurveyResult = () => {\n      router.push('/surveyresult/:memberId');\n    };\n    return {\n      isLoading,\n      survey,\n      currentStep,\n      currentQuestion,\n      currentQuestionIndex,\n      currentDetailedQuestionIndex,\n      currentDetailedQuestionsGroup,\n      selectedAnswers,\n      detailedAnswers,\n      isLastQuestion,\n      isLastDetailedQuestionsGroup,\n      canProceed,\n      isPersonalInfoComplete,\n      getAnswersForQuestion,\n      nextStep,\n      previousStep,\n      handleAnswerSelection,\n      finishSurvey,\n      isLoggedIn\n    };\n  }\n};","map":{"version":3,"names":["computed","onMounted","useRouter","useStore","name","setup","router","store","isLoading","state","survey","currentStep","currentQuestionIndex","currentDetailedQuestionIndex","currentDetailedQuestionsGroup","getters","selectedAnswers","detailedAnswers","currentQuestion","isLastQuestion","isLastDetailedQuestionsGroup","canProceed","isPersonalInfoComplete","isLoggedIn","member","value","push","dispatch","getAnswersForQuestion","questionId","surveyAnswers","filter","answer","nextStep","console","log","previousStep","handleAnswerSelection","payload","answerId","finishSurvey","memberId","goToSurveyResult"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\SurveyPage.vue"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <div v-if=\"isLoading\" class=\"loading\">Loading...</div>\n    <div v-else class=\"box-container-wide box-shadow\">\n      <div v-if=\"currentStep === 'personal-info'\">\n        <h2 class=\"text-melon\">📝</h2>\n        <table class=\"line-table\">\n          <tr>\n            <td><label for=\"name\">이름</label></td>\n            <td><input v-model=\"survey.name\" type=\"text\" id=\"name\" required></td>\n          </tr>\n          <tr>\n            <td><label for=\"age\">나이</label></td>\n            <td><input v-model=\"survey.age\" type=\"number\" id=\"age\" required></td>\n          </tr>\n          <tr>\n            <td><label for=\"gender\">성별</label></td>\n            <td>\n              <select v-model=\"survey.gender\" id=\"gender\" required>\n                <option value=\"\">선택하세요</option>\n                <option value=\"M\">남성</option>\n                <option value=\"F\">여성</option>\n              </select>\n            </td>\n          </tr>\n          <tr>\n            <td><label for=\"height\">키 (cm)</label></td>\n            <td><input v-model=\"survey.height\" type=\"number\" id=\"height\" required></td>\n          </tr>\n          <tr>\n            <td><label for=\"weight\">몸무게 (kg)</label></td>\n            <td><input v-model=\"survey.weight\" type=\"number\" id=\"weight\" required></td>\n          </tr>\n        </table>\n        <div class=\"btn-container\">\n          <button @click=\"nextStep\" class=\"btn btn-green\" :disabled=\"!isPersonalInfoComplete\">다음</button>\n        </div>\n      </div>\n\n      <div v-else-if=\"currentStep === 'questions'\">\n        <h2 class=\"text-melon\">🔎</h2>\n        <div v-if=\"currentQuestion\">\n          <p class=\"text-bold question-text\">{{ currentQuestionIndex + 1 }}. {{ currentQuestion.questionContent }}</p>\n          <div class=\"check-container-vertical\">\n            <div v-for=\"answer in getAnswersForQuestion(currentQuestion.id)\" :key=\"answer.id\" class=\"form-check\">\n              <input\n                :id=\"'answer-' + answer.id\"\n                :value=\"answer.id\"\n                type=\"checkbox\"\n                @change=\"handleAnswerSelection({ questionId: currentQuestion.id, answerId: answer.id })\">\n              <label :for=\"'answer-' + answer.id\">{{ answer.answerContent }}</label>\n            </div>\n          </div>\n        </div>\n        <div class=\"btn-container\">\n          <button @click=\"previousStep\" class=\"btn btn-gray\" v-if=\"currentQuestionIndex > 0\">이전</button>\n          <button @click=\"nextStep\" class=\"btn btn-green\" v-if=\"canProceed && !isLastQuestion\">다음</button>\n          <button @click=\"nextStep\" class=\"btn btn-green\" v-if=\"isLastQuestion && canProceed\">다음</button>\n        </div>\n      </div>\n\n      <div v-else-if=\"currentStep === 'detailed-questions'\" class=\"survey\">\n        <h2 class=\"text-melon\">🔎</h2>\n        <p class=\"text-bold\">· 해당하는 것을 모두 선택하세요</p>\n        <div v-for=\"dq in currentDetailedQuestionsGroup\" :key=\"dq.detailedQuestionId\">\n          <div class=\"check-container-vertical\">\n            <input type=\"checkbox\" :id=\"'answer-' + dq.detailedQuestionId\" :value=\"dq.detailedQuestionId\" v-model=\"detailedAnswers[dq.detailedQuestionId]\">\n            <label :for=\"'answer-' + dq.detailedQuestionId\">{{ dq.questionContent }}</label>\n          </div>\n        </div>\n        <div class=\"btn-container\">\n          <button @click=\"previousStep\" class=\"btn btn-gray\">이전</button>\n          <button @click=\"nextStep\" class=\"btn btn-green\" v-if=\"!isLastDetailedQuestionsGroup\">다음</button>\n          <button @click=\"finishSurvey\" class=\"btn btn-green\" v-if=\"isLastDetailedQuestionsGroup\">완료</button>\n        </div>\n      </div>\n\n      <div v-else-if=\"currentStep === 'finish'\">\n        <h2 class=\"text-melon\">설문 완료</h2>\n        <p>설문이 완료되었습니다. 결과를 확인하세요.</p>\n        <div class=\"btn-container\">\n          <button @click=\"goToSurveyResult\" class=\"btn btn-green\">결과 보기</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { computed, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\n\nexport default {\n  name: 'SurveyPage',\n  setup() {\n    const router = useRouter();\n    const store = useStore();\n\n    const isLoading = computed(() => store.state.survey.isLoading);\n    const survey = computed(() => store.state.survey.survey || {});\n    const currentStep = computed(() => store.state.survey.currentStep);\n    const currentQuestionIndex = computed(() => store.state.survey.currentQuestionIndex);\n    const currentDetailedQuestionIndex = computed(() => store.state.survey.currentDetailedQuestionIndex);\n    const currentDetailedQuestionsGroup = computed(() => store.getters['survey/currentDetailedQuestionsGroup']);\n    const selectedAnswers = computed(() => store.state.survey.selectedAnswers);\n    const detailedAnswers = computed(() => store.state.survey.detailedAnswers);\n    const currentQuestion = computed(() => store.getters['survey/currentQuestion']);\n    const isLastQuestion = computed(() => store.getters['survey/isLastQuestion']);\n    const isLastDetailedQuestionsGroup = computed(() => store.getters['survey/isLastDetailedQuestionsGroup']);\n    const canProceed = computed(() => store.getters['survey/canProceed']);\n    const isPersonalInfoComplete = computed(() => store.getters['survey/isPersonalInfoComplete']);\n    const isLoggedIn = computed(() => store.state.member.isLoggedIn);\n\n    onMounted(async () => {\n      if (!isLoggedIn.value) {\n        router.push('/login');\n        return;\n      }\n      await store.dispatch('survey/loadSurveyData');\n    });\n\n    const getAnswersForQuestion = (questionId) => {\n      return store.state.survey.surveyAnswers.filter(answer => answer.questionId === questionId);\n    };\n\n    const nextStep = () => {\n      console.log('Next Step clicked');  // 디버그 로그 추가\n      store.dispatch('survey/nextStep');\n    };\n\n    const previousStep = () => {\n      console.log('Previous Step clicked');  // 디버그 로그 추가\n      store.dispatch('survey/previousStep');\n    };\n\n    const handleAnswerSelection = (payload) => {\n      console.log('Answer selected:', payload.questionId, payload.answerId);  // 디버그 로그 추가\n      store.dispatch('survey/handleAnswerSelection', payload);\n    };\n\n    const finishSurvey = async () => {\n      console.log('SurveyPage.vue - memberId:', store.state.member.memberId);\n      console.log('Finish Survey clicked');  // 디버그 로그 추가\n\n      await store.dispatch('survey/finishSurvey');\n      goToSurveyResult();\n    };\n\n    const goToSurveyResult = () => {\n      router.push('/surveyresult/:memberId');\n    };\n\n    return {\n      isLoading,\n      survey,\n      currentStep,\n      currentQuestion,\n      currentQuestionIndex,\n      currentDetailedQuestionIndex,\n      currentDetailedQuestionsGroup,\n      selectedAnswers,\n      detailedAnswers,\n      isLastQuestion,\n      isLastDetailedQuestionsGroup,\n      canProceed,\n      isPersonalInfoComplete,\n      getAnswersForQuestion,\n      nextStep,\n      previousStep,\n      handleAnswerSelection,\n      finishSurvey,\n      isLoggedIn\n    };\n  }\n};\n</script>\n\n<style scoped>\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}