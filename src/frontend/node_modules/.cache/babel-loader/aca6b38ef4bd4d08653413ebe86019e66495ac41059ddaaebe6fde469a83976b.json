{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapGetters } from 'vuex';\nimport RichTextEditor from '@/components/RichTextEditor.vue';\nexport default {\n  name: 'ProductEdit',\n  components: {\n    RichTextEditor\n  },\n  data() {\n    return {\n      product: {\n        productId: '',\n        productName: '',\n        nutrientId: null,\n        price: '',\n        stock: '',\n        target: '공통',\n        productImage: '',\n        active: true\n      },\n      newNutrientName: '',\n      newNutrientDescription: ''\n    };\n  },\n  async created() {\n    await this.fetchNutrients();\n    const productId = this.$route.params.id; // URL 매개변수로부터 productId 가져오기\n    await this.loadProductDetails(productId);\n  },\n  computed: {\n    ...mapGetters('nutrient', ['nutrients']),\n    nutrientList() {\n      return this.nutrients;\n    },\n    selectedNutrientDescription() {\n      const selectedNutrient = this.nutrientList.find(nutrient => nutrient.nutrientId === this.product.nutrientId);\n      return selectedNutrient ? selectedNutrient.description : '';\n    }\n  },\n  methods: {\n    ...mapActions('nutrient', ['fetchNutrients', 'createNutrient']),\n    ...mapActions('product', ['updateProduct', 'fetchProductDetails']),\n    handleNutrientChange() {\n      if (this.product.nutrientId !== 'new') {\n        this.newNutrientName = '';\n        this.newNutrientDescription = '';\n      }\n    },\n    async saveNewNutrient() {\n      if (!this.newNutrientName || !this.newNutrientDescription) {\n        alert('영양제와 효능을 입력해주세요');\n        return;\n      }\n      try {\n        const newNutrient = await this.createNutrient({\n          nutrientName: this.newNutrientName,\n          description: this.newNutrientDescription\n        });\n        this.product.nutrientId = newNutrient.nutrientId;\n        alert('새로운 영양제 등록 성공');\n        await this.fetchNutrients();\n      } catch (error) {\n        console.error('새로운 영양제 등록 실패:', error);\n        alert('새로운 영양제를 등록하는 데 실패했습니다.');\n      }\n    },\n    async handleUpdateProduct() {\n      try {\n        await this.updateProduct(this.product);\n        this.navigateToProductList();\n      } catch (error) {\n        console.error('제품 수정 실패:', error);\n      }\n    },\n    navigateToProductList() {\n      this.$router.push('/admin/productlist');\n    },\n    async loadProductDetails(productId) {\n      try {\n        const product = await this.fetchProductDetails(productId);\n        this.product = {\n          productId: productId,\n          productName: product.productName,\n          nutrientId: product.nutrientId,\n          price: product.price,\n          stock: product.stock,\n          target: product.target,\n          productImage: product.productImage,\n          active: product.active\n        };\n        console.log('Loaded product details:', this.product);\n      } catch (error) {\n        console.error('제품 정보를 불러오는 데 실패했습니다:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mapGetters","RichTextEditor","name","components","data","product","productId","productName","nutrientId","price","stock","target","productImage","active","newNutrientName","newNutrientDescription","created","fetchNutrients","$route","params","id","loadProductDetails","computed","nutrientList","nutrients","selectedNutrientDescription","selectedNutrient","find","nutrient","description","methods","handleNutrientChange","saveNewNutrient","alert","newNutrient","createNutrient","nutrientName","error","console","handleUpdateProduct","updateProduct","navigateToProductList","$router","push","fetchProductDetails","log"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\product\\ProductEdit.vue"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <h1 class=\"text-melon\">제품 수정</h1>\n    <form @submit.prevent=\"handleUpdateProduct\">\n      <table style=\"width: 100%\">\n        <tr>\n          <td>제품명:</td>\n          <td><input v-model=\"product.productName\" type=\"text\" required /></td>\n        </tr>\n        <tr>\n          <td>영양제:</td>\n          <td class=\"select-input-flex\" style=\"display:flex\">\n            <select v-model=\"product.nutrientId\" @change=\"handleNutrientChange\">\n              <option :value=\"null\" selected>선택 안 함</option>\n              <option style=\"color:red;\" :value=\"'new'\">+ Add New Nutrient</option>\n              <option v-for=\"nutrient in nutrients\" :key=\"nutrient.nutrientId\" :value=\"nutrient.nutrientId\">\n                {{ nutrient.nutrientName }}\n              </option>\n            </select>\n            <input v-if=\"product.nutrientId === 'new'\" v-model=\"newNutrientName\" type=\"text\" placeholder=\"Enter Nutrient Name\" />\n            <input v-if=\"product.nutrientId === 'new'\" v-model=\"newNutrientDescription\" type=\"text\" placeholder=\"Enter Nutrient Description\" />\n            <input v-else type=\"text\" :value=\"selectedNutrientDescription\" disabled />\n            <button class=\"small-btn\" v-if=\"product.nutrientId === 'new'\" type=\"button\" @click=\"saveNewNutrient\">Save</button>\n          </td>\n        </tr>\n        <tr>\n          <td>가격:</td>\n          <td><input v-model=\"product.price\" type=\"number\" required /></td>\n        </tr>\n        <tr>\n          <td>재고:</td>\n          <td><input v-model=\"product.stock\" type=\"number\" required /></td>\n        </tr>\n        <tr>\n          <td>대상:</td>\n          <td>\n            <select v-model=\"product.target\" required>\n              <option value=\"공통\">공통</option>\n              <option value=\"여성\">여성</option>\n              <option value=\"남성\">남성</option>\n            </select>\n          </td>\n        </tr>\n      </table>\n      <RichTextEditor v-model=\"product.productImage\" />\n      <div class=\"box-container\">\n        <div class=\"btn-container\">\n          <button type=\"submit\" class=\"btn btn-green\">Update Product</button>\n          <button class=\"btn btn-gray\" @click=\"navigateToProductList\">Cancel</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex';\nimport RichTextEditor from '@/components/RichTextEditor.vue';\n\nexport default {\n  name: 'ProductEdit',\n  components: {\n    RichTextEditor\n  },\n  data() {\n    return {\n      product: {\n        productId: '', \n        productName: '',\n        nutrientId: null, \n        price: '',\n        stock: '',\n        target: '공통',\n        productImage: '', \n        active: true \n      },\n      newNutrientName: '',\n      newNutrientDescription: ''\n    };\n  },\n  async created() {\n    await this.fetchNutrients();\n    const productId = this.$route.params.id;  // URL 매개변수로부터 productId 가져오기\n    await this.loadProductDetails(productId);\n  },\n  computed: {\n    ...mapGetters('nutrient', ['nutrients']),\n    nutrientList() {\n      return this.nutrients;\n    },\n    selectedNutrientDescription() {\n      const selectedNutrient = this.nutrientList.find(nutrient => nutrient.nutrientId === this.product.nutrientId);\n      return selectedNutrient ? selectedNutrient.description : '';\n    }\n  },\n  methods: {\n    ...mapActions('nutrient', ['fetchNutrients', 'createNutrient']),\n    ...mapActions('product', ['updateProduct', 'fetchProductDetails']),\n    handleNutrientChange() {\n      if (this.product.nutrientId !== 'new') {\n        this.newNutrientName = '';\n        this.newNutrientDescription = '';\n      }\n    },\n    async saveNewNutrient() {\n      if (!this.newNutrientName || !this.newNutrientDescription) {\n        alert('영양제와 효능을 입력해주세요');\n        return;\n      }\n\n      try {\n        const newNutrient = await this.createNutrient({\n          nutrientName: this.newNutrientName,\n          description: this.newNutrientDescription\n        });\n        this.product.nutrientId = newNutrient.nutrientId;\n        alert('새로운 영양제 등록 성공');\n        await this.fetchNutrients();\n      } catch (error) {\n        console.error('새로운 영양제 등록 실패:', error);\n        alert('새로운 영양제를 등록하는 데 실패했습니다.');\n      }\n    },\n    async handleUpdateProduct() {\n      try {\n        await this.updateProduct(this.product);\n        this.navigateToProductList();\n      } catch (error) {\n        console.error('제품 수정 실패:', error);\n      }\n    },\n    navigateToProductList() {\n      this.$router.push('/admin/productlist');\n    },\n    async loadProductDetails(productId) {\n      try {\n        const product = await this.fetchProductDetails(productId);\n        this.product = {\n          productId: productId,\n          productName: product.productName,\n          nutrientId: product.nutrientId,\n          price: product.price,\n          stock: product.stock,\n          target: product.target,\n          productImage: product.productImage,\n          active: product.active\n        };\n        console.log('Loaded product details:', this.product);\n      } catch (error) {\n        console.error('제품 정보를 불러오는 데 실패했습니다:', error);\n      }\n    }\n  }\n};\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}