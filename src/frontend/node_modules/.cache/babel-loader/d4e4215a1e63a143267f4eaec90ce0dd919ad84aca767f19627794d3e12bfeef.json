{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from '../axios';\nimport { useRouter } from 'vue-router';\nimport { mapState, mapActions, useStore } from 'vuex';\nimport '../assets/styles.css';\nexport default {\n  name: 'MyPage',\n  setup() {\n    const store = useStore();\n    const router = useRouter();\n    const checkSurveyResult = async () => {\n      try {\n        const memberId = store.state.member.memberId;\n        const response = await axios.get(`/api/surveys/member/${memberId}`);\n        if (response.data && response.data.length > 0) {\n          router.push({\n            name: 'SurveyResult',\n            params: {\n              memberId\n            }\n          });\n        } else {\n          alert('건강 분석 결과를 찾을 수 없습니다');\n          router.push({\n            name: 'Survey'\n          });\n        }\n      } catch (error) {\n        console.error('Failed to fetch survey result:', error);\n        alert('설문 결과를 불러오는 중 오류가 발생했습니다.');\n        router.push({\n          name: 'Survey'\n        });\n      }\n    };\n    return {\n      store,\n      checkSurveyResult\n    };\n  },\n  data() {\n    return {\n      isEditing: false,\n      password: '',\n      showPasswordModal: false,\n      errors: {}\n    };\n  },\n  computed: {\n    ...mapState('member', ['member']),\n    user() {\n      return this.member;\n    },\n    subscriptionStatusText() {\n      return this.user.subscriptionStatus ? '구독 중' : '해당 사항 없음';\n    }\n  },\n  created() {\n    this.fetchUserProfile();\n  },\n  methods: {\n    ...mapActions('member', ['fetchUserProfile']),\n    toggleEdit() {\n      this.isEditing = !this.isEditing;\n    },\n    showPasswordPrompt() {\n      this.password = '';\n      this.showPasswordModal = true;\n    },\n    closePasswordModal() {\n      this.showPasswordModal = false;\n    },\n    async verifyPassword() {\n      try {\n        const verifyResponse = await axios.post('/api/members/verifyPassword', {\n          memberId: this.user.memberUniqueId,\n          password: this.password\n        });\n        if (verifyResponse.status === 200) {\n          this.isEditing = true;\n          this.showPasswordModal = false;\n        } else {\n          alert('비밀번호가 일치하지 않습니다.');\n        }\n      } catch (error) {\n        console.error('Error verifying password:', error);\n        alert('비밀번호 확인에 실패했습니다.');\n      }\n    },\n    async updateMember() {\n      try {\n        const response = await axios.put(`/api/members/update/${this.user.memberUniqueId}`, this.user);\n        if (response.status === 200) {\n          this.user = response.data;\n          this.isEditing = false;\n          alert('회원 정보가 성공적으로 수정되었습니다.');\n        } else {\n          console.error('Failed to update member information');\n        }\n      } catch (error) {\n        console.error('Error updating member information:', error);\n        alert('회원 정보 수정에 실패했습니다.');\n      }\n    },\n    cancelEdit() {\n      this.isEditing = false;\n      this.fetchUserProfile();\n    },\n    formatDate(date) {\n      if (!date) return '';\n      return new Date(date).toISOString().split('T')[0];\n    }\n  }\n};","map":{"version":3,"names":["axios","useRouter","mapState","mapActions","useStore","name","setup","store","router","checkSurveyResult","memberId","state","member","response","get","data","length","push","params","alert","error","console","isEditing","password","showPasswordModal","errors","computed","user","subscriptionStatusText","subscriptionStatus","created","fetchUserProfile","methods","toggleEdit","showPasswordPrompt","closePasswordModal","verifyPassword","verifyResponse","post","memberUniqueId","status","updateMember","put","cancelEdit","formatDate","date","Date","toISOString","split"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\MyPage.vue"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <h2 class=\"text-melon\">마이 페이지</h2>\n    <!-- mypage nav bar -->\n    <div class=\"btn-container\">\n      <button @click=\"checkSurveyResult\" class=\"btn-link\">나의 건강 분석</button>\n      <router-link to=\"/order-history\" class=\"btn-link\">주문 | 배송</router-link>\n      <router-link to=\"/#\" class=\"btn-link\">배송지 관리</router-link>\n      <router-link to=\"/mycoupon\" class=\"btn-link\">보유 쿠폰</router-link>\n      <router-link to=\"/reviewlist\" class=\"btn-link\">후기</router-link>\n      <router-link to=\"/myinquiries\" class=\"btn-link\">1:1 문의</router-link>\n    </div>\n    <div class=\"box-container-no-shade\">\n      <div>\n        <div v-if=\"user\">\n          <table class=\"mypage\">\n            <tr>\n              <td><label for=\"email\">이메일 </label></td>\n              <td><input type=\"email\" v-model=\"user.email\" :readonly=\"!isEditing\"/></td>\n            </tr>\n            <tr>\n              <td><label for=\"name\">이름 </label></td>\n              <td><input type=\"text\" v-model=\"user.name\" :readonly=\"!isEditing\"/></td>\n            </tr>\n            <tr>\n              <td><label for=\"age\">나이 </label></td>\n              <td><input type=\"text\" :value=\"user.age\" readonly/></td>\n            </tr>\n            <tr>\n              <td><label for=\"gender\">성별 </label></td>\n              <td>\n                <select v-model=\"user.gender\" v-if=\"isEditing\" required>\n                  <option value=\"N\">성별을 선택하세요</option>\n                  <option value=\"M\">남자</option>\n                  <option value=\"F\">여자</option>\n                </select>\n                <input type=\"text\" :value=\"user.gender\" v-else readonly/>\n              </td>\n            </tr>\n            <tr>\n              <td><label for=\"phoneNumber\">전화번호 </label></td>\n              <td><input type=\"text\" v-model=\"user.phoneNumber\" :readonly=\"!isEditing\"/></td>\n            </tr>\n            <tr>\n              <td><label for=\"subscriptionStatus\">구독 상태 </label></td>\n              <td><input type=\"text\" :value=\"subscriptionStatusText\" readonly/></td>\n            </tr>\n            <tr>\n              <td><label for=\"registrationDate\">가입 일자 </label></td>\n              <td><input type=\"text\" :value=\"formatDate(user.registrationDate)\" readonly/></td>\n            </tr>\n          </table>\n          <div class=\"btn-container\">\n            <button v-if=\"!isEditing\" class=\"btn btn-green\" @click=\"showPasswordPrompt\">수정하기</button>\n            <button v-else class=\"btn btn-green\" @click=\"updateMember\">저장하기</button>\n            <button v-if=\"isEditing\" class=\"btn btn-gray\" @click=\"cancelEdit\">취소</button>\n          </div>\n        </div>\n        <div v-else>\n          <p>Loading...</p>\n        </div>\n      </div>\n    </div>\n\n    <!-- 비밀번호 확인 모달창 -->\n    <div v-if=\"showPasswordModal\" class=\"modal\">\n      <div class=\"box-container box-shadow\">\n        <h4 class=\"text-melon\">비밀번호 확인</h4>\n        <input type=\"password\" v-model=\"password\" placeholder=\"비밀번호를 입력하세요\" />\n        <div class=\"btn-container\">\n          <button class=\"btn btn-green\" @click=\"verifyPassword\">비밀번호 확인</button>\n          <button class=\"btn btn-gray\" @click=\"closePasswordModal\">취소</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from '../axios';\nimport { useRouter } from 'vue-router';\nimport { mapState, mapActions, useStore } from 'vuex';\nimport '../assets/styles.css';\n\nexport default {\n  name: 'MyPage',\n  setup() {\n    const store = useStore();\n    const router = useRouter();\n\n    const checkSurveyResult = async () => {\n      try {\n        const memberId = store.state.member.memberId;\n        const response = await axios.get(`/api/surveys/member/${memberId}`);\n        \n        if (response.data && response.data.length > 0) {\n          router.push({ name: 'SurveyResult', params: { memberId } });\n        } else {\n          alert('건강 분석 결과를 찾을 수 없습니다');\n          router.push({ name: 'Survey' });\n        }\n      } catch (error) {\n        console.error('Failed to fetch survey result:', error);\n        alert('설문 결과를 불러오는 중 오류가 발생했습니다.');\n        router.push({ name: 'Survey' });\n      }\n    };\n\n    return {\n      store,\n      checkSurveyResult\n    };\n  },\n  data() {\n    return {\n      isEditing: false,\n      password: '',\n      showPasswordModal: false,\n      errors: {}\n    };\n  },\n  computed: {\n    ...mapState('member', ['member']),\n    user() {\n      return this.member;\n    },\n    subscriptionStatusText() {\n      return this.user.subscriptionStatus ? '구독 중' : '해당 사항 없음';\n    }\n  },\n  created() {\n    this.fetchUserProfile();\n  },\n  methods: {\n    ...mapActions('member', ['fetchUserProfile']),\n    toggleEdit() {\n      this.isEditing = !this.isEditing;\n    },\n    showPasswordPrompt() {\n      this.password='';\n      this.showPasswordModal = true;\n    },\n    closePasswordModal() {\n      this.showPasswordModal = false;\n    },\n    async verifyPassword() {\n      try {\n        const verifyResponse = await axios.post('/api/members/verifyPassword', {\n          memberId: this.user.memberUniqueId,\n          password: this.password,\n        });\n        if (verifyResponse.status === 200) {\n          this.isEditing = true;\n          this.showPasswordModal = false;\n        } else {\n          alert('비밀번호가 일치하지 않습니다.');\n        }\n      } catch (error) {\n        console.error('Error verifying password:', error);\n        alert('비밀번호 확인에 실패했습니다.');\n      }\n    },\n    async updateMember() {\n      try {\n        const response = await axios.put(`/api/members/update/${this.user.memberUniqueId}`, this.user);\n        if (response.status === 200) {\n          this.user = response.data;\n          this.isEditing = false;\n          alert('회원 정보가 성공적으로 수정되었습니다.');\n        } else {\n          console.error('Failed to update member information');\n        }\n      } catch (error) {\n        console.error('Error updating member information:', error);\n        alert('회원 정보 수정에 실패했습니다.');\n      }\n    },\n    cancelEdit() {\n      this.isEditing = false;\n      this.fetchUserProfile();\n    },\n    formatDate(date) {\n      if (!date) return '';\n      return new Date(date).toISOString().split('T')[0];\n    }\n  }\n};\n</script>\n\n<style>\n.btn-link {\n  padding: 5px 10px 5px 10px;\n  border: none;\n  border-radius: 20px;\n  background-color: #C6EDC2;\n  text-decoration-line: none;\n  color: black;\n  font-size: 15px;\n}\n\n.mypage input[readonly],\n.mypage select[readonly] {\n  text-align: right;\n}\n\n.modal {\n  position: fixed;\n  z-index: 1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgb(0,0,0);\n  background-color: rgba(0,0,0,0.4);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal-content {\n  background-color: #fefefe;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n  max-width: 500px;\n  border-radius: 10px;\n  text-align: center;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}