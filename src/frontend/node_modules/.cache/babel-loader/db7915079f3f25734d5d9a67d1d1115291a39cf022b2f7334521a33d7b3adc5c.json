{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport { computed, onMounted, reactive } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport AgeGroupDeficiencyChart from '@/components/AgeGroupDeficiencyChart'; // 추가된 부분\nimport AgeGroupTopProducts from '@/components/AgeGroupTopProducts'; // 추가된 부분\n\nexport default {\n  name: 'SurveyResultView',\n  components: {\n    AgeGroupDeficiencyChart,\n    // 추가된 부분\n    AgeGroupTopProducts // 추가된 부분\n  },\n  setup() {\n    const store = useStore();\n    const router = useRouter();\n    const isLoading = computed(() => store.state.survey.isLoading);\n    const surveyResult = computed(() => store.getters['survey/surveyResult']);\n    const recommendedProducts = computed(() => store.getters['survey/recommendedProducts']);\n    const deficiencies = computed(() => store.getters['deficiency/deficiencies']);\n    const isAddedToCart = reactive({});\n    const calculateBMI = (weight, height) => {\n      if (!weight || !height) return 'N/A';\n      const heightInMeters = height / 100;\n      return (weight / (heightInMeters * heightInMeters)).toFixed(2);\n    };\n    const getDeficiencyName = id => {\n      const deficiency = deficiencies.value?.find(def => def.deficiencyId === id);\n      return deficiency ? deficiency.deficiencyName : 'Unknown';\n    };\n    const uniqueDeficiencies = computed(() => {\n      const ids = [surveyResult.value?.deficiencyId1, surveyResult.value?.deficiencyId2, surveyResult.value?.deficiencyId3];\n      return [...new Set(ids)].filter(id => id !== null); // 중복 제거 및 null 필터링\n    });\n    const genderDisplay = computed(() => {\n      if (surveyResult.value?.gender === 'M') return '남';\n      if (surveyResult.value?.gender === 'F') return '여';\n      return '';\n    });\n    onMounted(async () => {\n      const memberId = store.state.member.memberId;\n      console.log('memberId:', memberId);\n      await store.dispatch('survey/loadSurveyResult', memberId);\n      console.log('surveyResult:', surveyResult.value);\n      if (!surveyResult.value) {\n        alert(\"설문 결과가 없습니다!\");\n        router.push(\"/survey\");\n        return;\n      }\n      await store.dispatch('deficiency/fetchDeficiencies');\n      await store.dispatch('product/fetchProducts');\n      await store.dispatch('survey/fetchProductsByDeficiency', uniqueDeficiencies.value);\n      console.log('recommendedProducts after fetch:', store.getters['survey/recommendedProducts']);\n      await store.dispatch('survey/fetchAgeGroupDeficiencyData'); // 추가된 부분\n      await store.dispatch('survey/fetchTopProductsByAgeGroup'); // 추가된 부분\n    });\n    const addToCart = async productId => {\n      try {\n        const cartItem = {\n          productId,\n          productQuantity: 1\n        };\n        const response = await store.dispatch('cart/addToCart', cartItem);\n        if (response.status === 201) {\n          isAddedToCart[productId] = true;\n        }\n      } catch (error) {\n        console.error('Error adding to cart:', error);\n      }\n    };\n    return {\n      isLoading,\n      surveyResult,\n      recommendedProducts,\n      calculateBMI,\n      getDeficiencyName,\n      uniqueDeficiencies,\n      genderDisplay,\n      isAddedToCart,\n      addToCart\n    };\n  }\n};","map":{"version":3,"names":["computed","onMounted","reactive","useStore","useRouter","AgeGroupDeficiencyChart","AgeGroupTopProducts","name","components","setup","store","router","isLoading","state","survey","surveyResult","getters","recommendedProducts","deficiencies","isAddedToCart","calculateBMI","weight","height","heightInMeters","toFixed","getDeficiencyName","id","deficiency","value","find","def","deficiencyId","deficiencyName","uniqueDeficiencies","ids","deficiencyId1","deficiencyId2","deficiencyId3","Set","filter","genderDisplay","gender","memberId","member","console","log","dispatch","alert","push","addToCart","productId","cartItem","productQuantity","response","status","error"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\SurveyResultView.vue"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <div v-if=\"isLoading\" class=\"loading\">Loading...</div>\n    <div v-else class=\"box-container box-shadow\">\n      <h4 class=\"text-melon\">{{ surveyResult?.name }} 님의 설문 조사 결과</h4>\n      <div v-if=\"surveyResult\">\n        <table class=\"result-table table-borderless\">\n          <tr>\n            <td>{{ surveyResult.age }} 세 | \n              ( {{ genderDisplay }} ) | \n              {{ surveyResult.height }} cm / {{ surveyResult.weight }} kg\n              ( BMI: {{ calculateBMI(surveyResult.weight, surveyResult.height) }} )</td>\n          </tr>\n        </table>\n        <div class=\"def-container\">\n          <div v-for=\"(deficiency, index) in uniqueDeficiencies\" :key=\"index\" class=\"def-id\">\n            <h4>#{{ getDeficiencyName(deficiency) }}</h4>\n          </div>\n        </div>\n        <hr class=\"line\">\n        <h4 class=\"text-melon\">{{ surveyResult?.name }} 님을 위한 추천 제품</h4>\n        <div class=\"product-container\">\n          <div v-for=\"(product, index) in recommendedProducts\" :key=\"index\" class=\"product-grid-item\">\n            <div class=\"product-item box-shadow\">\n              <router-link :to=\"{ name: 'ProductDetail', params: { id: product.productId } }\">\n                <img :src=\"product.productImage\" alt=\"productImg\" class=\"product-image\">\n                <h5>{{ product.productName }}</h5>\n              </router-link>\n              <button \n                :disabled=\"isAddedToCart[product.productId]\"\n                @click=\"addToCart(product.productId)\"\n                class=\"btn btn-green\">\n                {{ isAddedToCart[product.productId] ? \"담겼습니다 ✅\" : \"장바구니에 담기\" }}\n              </button>\n            </div>\n          </div>\n        </div>\n        <!-- 추가된 부분 시작 -->\n        <h4 class=\"text-melon\">나이대별 부족한 영양소 통계</h4>\n        <AgeGroupDeficiencyChart :userAge=\"surveyResult.age\" />\n        <!-- 추가된 부분 끝 -->\n        <!-- AgeGroupTopProducts 추가 -->\n        <h4 class=\"text-melon\">고객 선호 제품</h4>\n        <AgeGroupTopProducts />\n      </div>\n      <div v-else>\n        <p>설문 결과를 불러오는 중입니다...</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { computed, onMounted, reactive } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport AgeGroupDeficiencyChart from '@/components/AgeGroupDeficiencyChart'; // 추가된 부분\nimport AgeGroupTopProducts from '@/components/AgeGroupTopProducts'; // 추가된 부분\n\nexport default {\n  name: 'SurveyResultView',\n  components: {\n    AgeGroupDeficiencyChart, // 추가된 부분\n    AgeGroupTopProducts // 추가된 부분\n  },\n  setup() {\n    const store = useStore();\n    const router = useRouter();\n    const isLoading = computed(() => store.state.survey.isLoading);\n    const surveyResult = computed(() => store.getters['survey/surveyResult']);\n    const recommendedProducts = computed(() => store.getters['survey/recommendedProducts']);\n    const deficiencies = computed(() => store.getters['deficiency/deficiencies']);\n    const isAddedToCart = reactive({});\n\n    const calculateBMI = (weight, height) => {\n      if (!weight || !height) return 'N/A';\n      const heightInMeters = height / 100;\n      return (weight / (heightInMeters * heightInMeters)).toFixed(2);\n    };\n\n    const getDeficiencyName = (id) => {\n      const deficiency = deficiencies.value?.find(def => def.deficiencyId === id);\n      return deficiency ? deficiency.deficiencyName : 'Unknown';\n    };\n\n    const uniqueDeficiencies = computed(() => {\n      const ids = [surveyResult.value?.deficiencyId1, surveyResult.value?.deficiencyId2, surveyResult.value?.deficiencyId3];\n      return [...new Set(ids)].filter(id => id !== null); // 중복 제거 및 null 필터링\n    });\n\n    const genderDisplay = computed(() => {\n      if (surveyResult.value?.gender === 'M') return '남';\n      if (surveyResult.value?.gender === 'F') return '여';\n      return '';\n    });\n\n    onMounted(async () => {\n      const memberId = store.state.member.memberId;\n      console.log('memberId:', memberId);\n      await store.dispatch('survey/loadSurveyResult', memberId);\n      console.log('surveyResult:', surveyResult.value);\n\n      if (!surveyResult.value) {\n        alert(\"설문 결과가 없습니다!\");\n        router.push(\"/survey\");\n        return;\n      }\n\n      await store.dispatch('deficiency/fetchDeficiencies');\n      await store.dispatch('product/fetchProducts');\n      await store.dispatch('survey/fetchProductsByDeficiency', uniqueDeficiencies.value);\n      console.log('recommendedProducts after fetch:', store.getters['survey/recommendedProducts']);\n\n      await store.dispatch('survey/fetchAgeGroupDeficiencyData'); // 추가된 부분\n      await store.dispatch('survey/fetchTopProductsByAgeGroup'); // 추가된 부분\n    });\n\n    const addToCart = async (productId) => {\n      try {\n        const cartItem = {\n          productId,\n          productQuantity: 1\n        };\n        const response = await store.dispatch('cart/addToCart', cartItem);\n        if (response.status === 201) {\n          isAddedToCart[productId] = true;\n        }\n      } catch (error) {\n        console.error('Error adding to cart:', error);\n      }\n    };\n\n    return {\n      isLoading,\n      surveyResult,\n      recommendedProducts,\n      calculateBMI,\n      getDeficiencyName,\n      uniqueDeficiencies,\n      genderDisplay,\n      isAddedToCart,\n      addToCart\n    };\n  }\n};\n</script>\n\n<style scoped>\n@import '../assets/styles.css';\n\n.result-table {\n  border: 0;\n}\n\n.def-container {\n  margin-top: 10px;\n  margin-bottom: 30px;\n  padding: 10px;\n  display: flex;\n  gap: 20px;\n  justify-content: center;\n}\n\n.def-id {\n  background-color: #B4D9A9;\n  padding: 20px;\n  text-align: center;\n  border-radius: 35px; /* 둥근 모서리 추가 */\n  display: inline-block;\n  white-space: nowrap;\n}\n\n.def-id h4 {\n  color: white;\n  margin: 0;\n  display: inline;\n}\n\n.product-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n  padding: 10px;\n}\n\n.product-grid-item {\n  display: flex;\n  justify-content: center;\n}\n\n.product-item {\n  width: 100%;\n  padding: 7px;\n  text-align: center;\n  justify-content: center;\n}\n\n.product-image {\n  width: 100%;\n  height: auto;\n  display: block;\n  margin-bottom: 10px;\n}\n\n.btn {\n  margin-top: 10px;\n  display: inline-block;\n}\n\n/* 반응형 디자인을 위한 미디어 쿼리 */\n@media (max-width: 600px) {\n  .def-container {\n    grid-template-columns: 1fr; /* 화면이 좁아지면 세로 배열 */\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}