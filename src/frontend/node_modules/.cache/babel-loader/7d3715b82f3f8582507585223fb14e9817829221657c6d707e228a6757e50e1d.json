{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from '../../axios';\nimport store from '../index';\nconst state = {\n  reviews: []\n};\nconst mutations = {\n  setReviews(state, reviews) {\n    state.reviews = reviews;\n  },\n  addReview(state, review) {\n    state.reviews.push(review);\n  },\n  updateReview(state, updatedReview) {\n    const index = state.reviews.findIndex(review => review.reviewId === updatedReview.reviewId);\n    if (index !== -1) {\n      state.reviews.splice(index, 1, updatedReview);\n    }\n  }\n};\nconst actions = {\n  async fetchReviews({\n    commit\n  }) {\n    try {\n      const response = await axios.get('/api/reviews/list');\n      const reviews = await Promise.all(response.data.map(async review => {\n        const orderDetailResponse = await axios.get(`/api/order-details/${review.orderDetailNo}`);\n        const productId = orderDetailResponse.data.productId;\n        const productResponse = await axios.get(`/api/products/detail/${productId}`);\n        const productImage = extractFirstImage(productResponse.data.productImage);\n        return {\n          ...review,\n          product: {\n            ...productResponse.data,\n            productImage\n          }\n        };\n      }));\n      commit('setReviews', reviews);\n      console.log('리뷰 데이터를 성공적으로 가져왔습니다:', reviews);\n    } catch (error) {\n      console.error('리뷰 데이터를 가져오는 데 실패했습니다:', error);\n      throw error;\n    }\n  },\n  async createReview({\n    commit\n  }, reviewData) {\n    try {\n      const memberId = store.state.member.memberId;\n      console.log('memberId:', memberId);\n      const reviewPayload = {\n        ...reviewData,\n        memberId\n      };\n      console.log('Sending review data:', reviewPayload);\n      const response = await axios.post('/api/reviews/create', reviewPayload, {\n        withCredentials: true\n      });\n      commit('addReview', response.data);\n      console.log('후기 등록이 성공적으로 완료되었습니다: ', response.data);\n    } catch (error) {\n      console.error('후기 등록에 실패했습니다: ', error);\n      throw error;\n    }\n  },\n  async updateReview({\n    commit\n  }, reviewData) {\n    try {\n      const {\n        reviewId,\n        ...payload\n      } = reviewData;\n      console.log('Sending update request for reviewId:', reviewId); // 로그 추가\n      console.log('Payload:', payload); // 로그 추가\n\n      const response = await axios.put(`/api/reviews/update/${reviewId}`, payload, {\n        withCredentials: true\n      });\n      commit('updateReview', response.data);\n      console.log('후기 수정이 성공적으로 완료되었습니다: ', response.data);\n    } catch (error) {\n      console.error('후기 수정에 실패했습니다: ', error);\n      throw error;\n    }\n  }\n};\nconst getters = {\n  reviews: state => state.reviews\n};\nfunction extractFirstImage(htmlString) {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(htmlString, 'text/html');\n  const imgTag = doc.querySelector('img');\n  if (imgTag) {\n    return imgTag.src;\n  }\n  return null;\n}\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","store","state","reviews","mutations","setReviews","addReview","review","push","updateReview","updatedReview","index","findIndex","reviewId","splice","actions","fetchReviews","commit","response","get","Promise","all","data","map","orderDetailResponse","orderDetailNo","productId","productResponse","productImage","extractFirstImage","product","console","log","error","createReview","reviewData","memberId","member","reviewPayload","post","withCredentials","payload","put","getters","htmlString","parser","DOMParser","doc","parseFromString","imgTag","querySelector","src","namespaced"],"sources":["C:/Users/woori/IdeaProjects/pillgood_v2/src/frontend/src/store/modules/reviewStore.js"],"sourcesContent":["import axios from '../../axios';\nimport store from '../index';\n\nconst state = {\n  reviews: [],\n};\n\nconst mutations = {\n  setReviews(state, reviews) {\n    state.reviews = reviews;\n  },\n  addReview(state, review) {\n    state.reviews.push(review);\n  },\n  updateReview(state, updatedReview) {\n    const index = state.reviews.findIndex(review => review.reviewId === updatedReview.reviewId);\n    if (index !== -1) {\n      state.reviews.splice(index, 1, updatedReview);\n    }\n  },\n};\n\nconst actions = {\n  async fetchReviews({ commit }) {\n    try {\n      const response = await axios.get('/api/reviews/list');\n      const reviews = await Promise.all(response.data.map(async review => {\n        const orderDetailResponse = await axios.get(`/api/order-details/${review.orderDetailNo}`);\n        const productId = orderDetailResponse.data.productId;\n        const productResponse = await axios.get(`/api/products/detail/${productId}`);\n        const productImage = extractFirstImage(productResponse.data.productImage);\n\n        return {\n          ...review,\n          product: {\n            ...productResponse.data,\n            productImage\n          }\n        };\n      }));\n      commit('setReviews', reviews);\n      console.log('리뷰 데이터를 성공적으로 가져왔습니다:', reviews);\n    } catch (error) {\n      console.error('리뷰 데이터를 가져오는 데 실패했습니다:', error);\n      throw error;\n    }\n  },\n  async createReview({ commit }, reviewData) {\n    try {\n      const memberId = store.state.member.memberId;\n      console.log('memberId:', memberId);\n\n      const reviewPayload = {\n        ...reviewData,\n        memberId,\n      };\n\n      console.log('Sending review data:', reviewPayload);\n\n      const response = await axios.post('/api/reviews/create', reviewPayload, {\n        withCredentials: true,\n      });\n\n      commit('addReview', response.data);\n      console.log('후기 등록이 성공적으로 완료되었습니다: ', response.data);\n    } catch (error) {\n      console.error('후기 등록에 실패했습니다: ', error);\n      throw error;\n    }\n  },\n  async updateReview({ commit }, reviewData) {\n    try {\n      const { reviewId, ...payload } = reviewData;\n      console.log('Sending update request for reviewId:', reviewId); // 로그 추가\n      console.log('Payload:', payload); // 로그 추가\n\n      const response = await axios.put(`/api/reviews/update/${reviewId}`, payload, {\n        withCredentials: true,\n      });\n\n      commit('updateReview', response.data);\n      console.log('후기 수정이 성공적으로 완료되었습니다: ', response.data);\n    } catch (error) {\n      console.error('후기 수정에 실패했습니다: ', error);\n      throw error;\n    }\n  }\n};\n\nconst getters = {\n  reviews: state => state.reviews,\n};\n\nfunction extractFirstImage(htmlString) {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(htmlString, 'text/html');\n  const imgTag = doc.querySelector('img');\n  if (imgTag) {\n    return imgTag.src;\n  }\n  return null;\n}\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}