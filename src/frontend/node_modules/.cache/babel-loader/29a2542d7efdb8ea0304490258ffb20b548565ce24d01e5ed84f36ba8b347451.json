{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState, mapActions, mapGetters } from 'vuex';\nimport axios from '../axios';\nimport '../assets/styles.css';\nexport default {\n  name: 'OrderPage',\n  data() {\n    return {\n      ownedCouponId: '',\n      recipient: '',\n      postalCode: '',\n      address: '',\n      detailedAddress: '',\n      phoneNumber: '',\n      orderRequest: '',\n      subscriptionStatus: false,\n      discountAmount: 0,\n      shippingFee: 0,\n      totalAmount: 0,\n      usePoints: 0,\n      pointsApplied: false,\n      pointsError: '',\n      totalPoints: 0,\n      tossPayments: null,\n      paymentWidget: null,\n      currentOrderId: null,\n      // 현재 주문 ID를 저장합니다.\n      addressType: 'existing',\n      // 기본값을 기존 배송지로 설정\n      addresses: [],\n      // 기존 배송지 목록\n      selectedAddress: null,\n      // 선택된 기존 배송지\n      errors: {\n        recipient: '',\n        phoneNumber: '',\n        address: '',\n        detailedAddress: ''\n      }\n    };\n  },\n  computed: {\n    ...mapGetters('member', ['memberId']),\n    ...mapState('order', {\n      isLoggedIn: state => state.isLoggedIn,\n      items: state => state.orderDetails,\n      user: state => state.userProfile,\n      coupons: state => state.coupons\n    }),\n    ...mapState('billing', ['billingKey']),\n    // billingStore에서 billingKey 가져오기\n    shippingFeeMessage() {\n      return this.shippingFee === 0 ? '무료' : `+${this.shippingFee} 원`;\n    }\n  },\n  async created() {\n    await this.fetchUserProfile();\n    await this.fetchCoupons();\n    await this.fetchOrderDetails();\n    await this.fetchBillingKey();\n    this.setRecipientAndPhoneNumber();\n    this.calculateTotalAmount();\n    await this.fetchTotalPoints(); // 총 포인트 가져오기\n    this.fetchAddresses(); // 기존 배송지 목록을 가져오는 함수 호출\n  },\n  methods: {\n    ...mapActions('order', ['fetchUserProfile', 'fetchCoupons', 'fetchOrderDetails', 'placeOrder']),\n    ...mapActions('billing', ['fetchBillingKey']),\n    async fetchTotalPoints() {\n      try {\n        const response = await axios.get('/api/points/totalPoints', {\n          withCredentials: true\n        });\n        this.totalPoints = response.data;\n      } catch (error) {\n        console.error('Error fetching total points:', error);\n      }\n    },\n    fetchAddresses() {\n      // API 호출 또는 데이터를 가져오는 로직\n      this.addresses = [{\n        id: 1,\n        name: '배송지1',\n        recipient: '홍길동',\n        phoneNumber: '010-1234-5678',\n        postalCode: '12345',\n        address: '서울시 강남구',\n        detailedAddress: '역삼동 123-45'\n      }, {\n        id: 2,\n        name: '배송지2',\n        recipient: '김철수',\n        phoneNumber: '010-8765-4321',\n        postalCode: '54321',\n        address: '서울시 서초구',\n        detailedAddress: '서초동 67-89'\n      }];\n    },\n    applyCoupon() {\n      const selectedCoupon = this.coupons.find(coupon => coupon.ownedCouponId === this.ownedCouponId);\n      this.discountAmount = selectedCoupon ? selectedCoupon.discountAmount : 0;\n      this.calculateTotalAmount();\n    },\n    calculateTotalAmount() {\n      const subtotal = this.items.reduce((total, item) => total + item.price * item.productQuantity, 0);\n      this.shippingFee = subtotal >= 30000 ? 0 : 3000;\n      this.totalAmount = subtotal - this.discountAmount + this.shippingFee - this.usePoints;\n    },\n    setRecipientAndPhoneNumber() {\n      if (this.user) {\n        this.recipient = this.user.name;\n        this.phoneNumber = this.user.phoneNumber;\n      }\n    },\n    applyPoints() {\n      if (this.usePoints < 1000) {\n        this.pointsError = '포인트는 최소 1000포인트부터 사용 가능합니다.';\n        return;\n      }\n      if (this.usePoints > this.totalPoints) {\n        this.pointsError = '포인트가 부족합니다.';\n        return;\n      }\n      this.pointsError = '';\n      this.pointsApplied = true;\n      this.calculateTotalAmount();\n    },\n    validateRecipient() {\n      this.errors.recipient = this.recipient ? '' : '이름을 입력해주세요.';\n    },\n    validatePhoneNumber() {\n      this.errors.phoneNumber = this.phoneNumber ? '' : '연락처를 입력해주세요.';\n    },\n    validateAddress() {\n      if (this.postalCode && this.address) {\n        this.errors.address = '';\n      } else {\n        this.errors.address = '주소를 등록해주세요.';\n      }\n    },\n    validateDetailedAddress() {\n      this.errors.detailedAddress = this.detailedAddress ? '' : '나머지 주소를 입력해주세요.';\n    },\n    validateForm() {\n      this.validateRecipient();\n      this.validatePhoneNumber();\n      this.validateAddress();\n      this.validateDetailedAddress();\n      return !this.errors.recipient && !this.errors.phoneNumber && !this.errors.address && !this.errors.detailedAddress;\n    },\n    async preparePayment() {\n      if (!this.validateForm()) {\n        return;\n      }\n      const orderDetails = {\n        items: this.items,\n        totalAmount: this.totalAmount,\n        recipient: this.recipient,\n        postalCode: this.postalCode,\n        address: this.address,\n        detailedAddress: this.detailedAddress,\n        phoneNumber: this.phoneNumber,\n        orderRequest: this.orderRequest,\n        ownedCouponId: this.ownedCouponId || null,\n        subscriptionStatus: this.subscriptionStatus,\n        pointsToUse: this.usePoints // 포인트 사용 정보 추가\n      };\n      try {\n        const orderResponse = await this.placeOrder(orderDetails);\n        if (orderResponse.status === 201) {\n          this.currentOrderId = orderResponse.data.orderNo;\n          console.log('Current Order:', this.$store.state.order.currentOrder); // 로깅 추가\n          // localStorage에 currentOrder 저장\n          localStorage.setItem('currentOrder', JSON.stringify(this.$store.state.order.currentOrder));\n          if (this.subscriptionStatus) {\n            if (this.billingKey) {\n              this.$router.push({\n                name: 'ApprovePayment'\n              }); // 결제 성공 페이지로 이동\n            } else {\n              await this.initializeTossPayments();\n              this.setupBillingAuth(this.currentOrderId); // 정기 결제\n            }\n          } else {\n            await this.initializeTossPayments();\n            this.setupTossPayments(this.currentOrderId); // 일반 결제\n          }\n        } else {\n          console.error('주문 생성 실패:', orderResponse);\n          alert('주문 생성 중 오류가 발생했습니다. 다시 시도하세요.');\n        }\n      } catch (error) {\n        console.error('결제 준비 중 오류:', error);\n        alert('결제 준비 중 오류가 발생했습니다. 다시 시도하세요.');\n      }\n    },\n    initializeTossPayments() {\n      return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.src = 'https://js.tosspayments.com/v1/payment';\n        script.onload = resolve;\n        script.onerror = reject;\n        document.head.appendChild(script);\n      });\n    },\n    async setupTossPayments(orderId) {\n      const clientKey = await this.fetchClientKey();\n      if (!clientKey) {\n        console.error('Client key is not defined');\n        return;\n      }\n      if (!window.TossPayments) {\n        console.error('TossPayments is not loaded');\n        return;\n      }\n      this.tossPayments = window.TossPayments(clientKey);\n      const paymentRequest = {\n        amount: this.totalAmount,\n        orderId: orderId,\n        orderName: 'Order Name',\n        customerName: this.recipient,\n        successUrl: `${window.location.origin}/payment/success`,\n        failUrl: `${window.location.origin}/payment/fail`\n      };\n      try {\n        const response = await this.tossPayments.requestPayment('카드', paymentRequest);\n        const paymentKey = response.paymentKey;\n        const successUrl = `${window.location.origin}/payment/success?orderId=${orderId}&amount=${this.totalAmount}&paymentKey=${paymentKey}`;\n        window.location.href = successUrl; // 결제 성공 페이지로 이동\n      } catch (error) {\n        console.error('결제 요청 오류:', error);\n        alert('결제 요청 중 오류가 발생했습니다. 다시 시도하세요.');\n        await this.cancelOrder(orderId); // 결제 요청 오류 발생 시 주문을 취소합니다.\n      }\n    },\n    async setupBillingAuth(orderId) {\n      const clientKey = await this.fetchClientKey();\n      if (!clientKey) {\n        console.error('Client key is not defined');\n        return;\n      }\n      if (!window.TossPayments) {\n        console.error('TossPayments is not loaded');\n        return;\n      }\n      this.tossPayments = window.TossPayments(clientKey);\n      try {\n        await this.tossPayments.requestBillingAuth('카드', {\n          customerKey: this.memberId,\n          // 구매자 ID\n          successUrl: `${window.location.origin}/payment/card`,\n          failUrl: `${window.location.origin}/payment/fail`\n        });\n\n        // authKey는 successUrl로 이동하면서 전달됨\n      } catch (error) {\n        if (error.code === 'USER_CANCEL') {\n          console.log('결제 고객이 결제창을 닫았습니다.');\n          await this.cancelOrder(orderId); // 결제 취소 시 주문을 취소합니다.\n        } else {\n          console.error('결제 요청 오류:', error);\n          alert('결제 요청 중 오류가 발생했습니다. 다시 시도하세요.');\n          await this.cancelOrder(orderId); // 결제 요청 오류 발생 시 주문을 취소합니다.\n        }\n      }\n    },\n    async fetchClientKey() {\n      try {\n        const response = await axios.get('/api/payment/client-key');\n        return response.data.clientKey;\n      } catch (error) {\n        console.error('Failed to fetch client key:', error);\n      }\n    },\n    async cancelOrder(orderNo) {\n      try {\n        await axios.delete(`/api/orders/cancel/${orderNo}`, {\n          withCredentials: true\n        });\n        alert('주문이 취소되었습니다.');\n      } catch (error) {\n        console.error('주문 취소 중 오류 발생:', error);\n        alert('주문 취소 중 오류가 발생했습니다. 다시 시도하세요.');\n      }\n    },\n    openDaumPostcode() {\n      const elementWrap = this.$refs.wrap;\n      const currentScroll = Math.max(document.body.scrollTop, document.documentElement.scrollTop);\n      new window.daum.Postcode({\n        oncomplete: data => {\n          let addr = '';\n          if (data.userSelectedType === 'R') {\n            addr = data.roadAddress;\n          } else {\n            addr = data.jibunAddress;\n          }\n          this.postalCode = data.zonecode;\n          this.address = addr;\n          elementWrap.style.display = 'none';\n          document.body.scrollTop = currentScroll;\n          this.validateAddress(); // 주소 검색 후 유효성 검사\n        },\n        onresize: size => {\n          elementWrap.style.height = size.height + 'px';\n        },\n        width: '100%',\n        height: '100%'\n      }).embed(elementWrap);\n      elementWrap.style.display = 'block';\n    },\n    foldDaumPostcode() {\n      const elementWrap = this.$refs.wrap;\n      elementWrap.style.display = 'none';\n    }\n  },\n  watch: {\n    ownedCouponId(newVal) {\n      if (newVal === '') {\n        this.discountAmount = 0;\n      }\n      this.applyCoupon();\n    },\n    recipient() {\n      this.validateRecipient();\n    },\n    phoneNumber() {\n      this.validatePhoneNumber();\n    },\n    detailedAddress() {\n      this.validateDetailedAddress();\n    },\n    postalCode() {\n      this.validateAddress();\n    },\n    address() {\n      this.validateAddress();\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapActions","mapGetters","axios","name","data","ownedCouponId","recipient","postalCode","address","detailedAddress","phoneNumber","orderRequest","subscriptionStatus","discountAmount","shippingFee","totalAmount","usePoints","pointsApplied","pointsError","totalPoints","tossPayments","paymentWidget","currentOrderId","addressType","addresses","selectedAddress","errors","computed","isLoggedIn","state","items","orderDetails","user","userProfile","coupons","shippingFeeMessage","created","fetchUserProfile","fetchCoupons","fetchOrderDetails","fetchBillingKey","setRecipientAndPhoneNumber","calculateTotalAmount","fetchTotalPoints","fetchAddresses","methods","response","get","withCredentials","error","console","id","applyCoupon","selectedCoupon","find","coupon","subtotal","reduce","total","item","price","productQuantity","applyPoints","validateRecipient","validatePhoneNumber","validateAddress","validateDetailedAddress","validateForm","preparePayment","pointsToUse","orderResponse","placeOrder","status","orderNo","log","$store","order","currentOrder","localStorage","setItem","JSON","stringify","billingKey","$router","push","initializeTossPayments","setupBillingAuth","setupTossPayments","alert","Promise","resolve","reject","script","document","createElement","src","onload","onerror","head","appendChild","orderId","clientKey","fetchClientKey","window","TossPayments","paymentRequest","amount","orderName","customerName","successUrl","location","origin","failUrl","requestPayment","paymentKey","href","cancelOrder","requestBillingAuth","customerKey","memberId","code","delete","openDaumPostcode","elementWrap","$refs","wrap","currentScroll","Math","max","body","scrollTop","documentElement","daum","Postcode","oncomplete","addr","userSelectedType","roadAddress","jibunAddress","zonecode","style","display","onresize","size","height","width","embed","foldDaumPostcode","watch","newVal"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\OrderPage.vue"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <h2 class=\"text-melon\">주문하기</h2>\n    <div class=\"box-container\">\n    <table class=\"line-table\">\n    <thead>\n      <tr>\n        <th>상품 정보</th>\n        <th>수량</th>\n        <th>가격</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr v-for=\"item in items\" :key=\"item.productId\">\n        <td class=\"item-info\" colspan=\"2\"><div class=\"item-image\"><img :src=\"item.productImage\" alt=\"Product Image\" /></div>\n        {{ item.productName }}</td>\n        <td>{{ item.productQuantity }}</td>\n        <td>{{ item.price * item.productQuantity }} 원</td>\n      </tr>\n    </tbody>\n  </table>\n  <div style=\"display: flex; align-items: flex-end; flex-direction: column; margin-top: 10px;\">\n    <h6>배송비 {{ shippingFeeMessage }}</h6>\n    <hr style=\"width: 200px\">\n    <h4 class=\"text-melon\">합계: {{ totalAmount }} 원</h4>\n  </div>\n  <hr class=\"line\">\n\n  <div class=\"box-container-no-shade\">\n    <label for=\"ownedCouponId\"><h4 class=\"text-melon\">쿠폰 / 포인트 사용</h4></label>\n    <select id=\"ownedCouponId\" v-model=\"ownedCouponId\" @change=\"applyCoupon\">\n      <option value=\"\">보유중인 쿠폰 선택하기</option>\n      <option v-for=\"coupon in coupons\" :key=\"coupon.ownedCouponId\" :value=\"coupon.ownedCouponId\">\n        {{ coupon.couponName }}\n      </option>\n    </select>\n    <p v-if=\"coupons.length === 0\">보유중인 쿠폰이 없습니다.</p>\n  </div>\n  <div class=\"box-container-no-shade btn-container\">\n    <div class=\"point-wrapper\">\n    <input type=\"number\" id=\"usePoints\" v-model.number=\"usePoints\" :readonly=\"pointsApplied\" /> P&nbsp;/&nbsp;<span style=\"color: red\">{{ totalPoints }}</span>&nbsp;P&nbsp;  \n    <button @click=\"applyPoints\" :disabled=\"pointsApplied || usePoints < 1000\" class=\"btn btn-green\" style=\"height: 30px\">적용하기</button></div>\n    <span class=\"text-info\">포인트는 최소 1000 포인트 보유 시, 1000 포인트 이상 사용 가능합니다.</span>\n    <span v-if=\"pointsError\" class=\"text-danger\">{{ pointsError }}</span>\n  </div>\n\n  <hr class=\"line\" style=\"background: white\">\n\n  <div style=\"display: flex; align-items: flex-end; flex-direction: column;\">\n    <h6>(3만원 이상 구매시 배송비 무료)</h6>\n    <h4 class=\"text-melon\">총 결제액: {{ totalAmount }} 원</h4>\n  </div>\n\n  <hr class=\"line\">\n\n  <div class=\"order-details\">\n    <h4 class=\"text-melon\">배송 정보</h4>\n    <table class=\"line-table\" style=\"padding: 10px\">\n      <colgroup>\n        <col style=\"width:170px\">\n        <col style=\"width:*\">\n      </colgroup>\n      <tbody>\n        <tr>\n          <td style=\"text-align: left;\">배송지 선택</td>\n          <td>\n            <div class=\"radio-container\">\n              <input type=\"radio\" id=\"existingAddress\" value=\"existing\" v-model=\"addressType\" />\n              <label for=\"existingAddress\">기존 배송지</label>\n              <input type=\"radio\" id=\"newAddress\" value=\"new\" v-model=\"addressType\" />\n              <label for=\"newAddress\">새로운 배송지</label>\n            </div>\n          </td>\n        </tr>\n        <tr v-if=\"addressType === 'existing'\">\n          <td style=\"text-align: left;\">배송지명</td>\n          <td>\n            <select v-model=\"selectedAddress\">\n              <option v-for=\"address in addresses\" :key=\"address.id\" :value=\"address\">{{ address.name }}</option>\n            </select>\n          </td>\n        </tr>\n        <tr v-if=\"addressType === 'new'\">\n          <td style=\"text-align: left;\"><label for=\"recipient\">수령인 이름</label></td>\n          <td>\n            <input type=\"text\" id=\"recipient\" v-model=\"recipient\" @input=\"validateRecipient\" />\n            <p v-if=\"errors.recipient\" class=\"error\">{{ errors.recipient }}</p>\n          </td>\n        </tr>\n        <tr v-if=\"addressType === 'new'\">\n          <td style=\"text-align: left\"><label for=\"phoneNumber\">수령인 연락처</label></td>\n          <td>\n            <input type=\"text\" id=\"phoneNumber\" v-model=\"phoneNumber\" @input=\"validatePhoneNumber\" />\n            <p v-if=\"errors.phoneNumber\" class=\"error\">{{ errors.phoneNumber }}</p>\n          </td>\n        </tr>\n        <tr class=\"postal-code-group\" v-if=\"addressType === 'new'\">\n          <td style=\"text-align: left\"><label for=\"postalCode\">주소</label></td>\n          <td>\n            <div class=\"postal-code-input\">\n              <input type=\"text\" id=\"postalCode\" v-model=\"postalCode\" class=\"postal-code-field\" readonly />\n              <button @click=\"openDaumPostcode\" class=\"btn btn-green\" style=\"display: inline-block; white-space: nowrap;\">우편 번호 찾기</button>\n            </div>\n            <div ref=\"wrap\" style=\"display:none;border:1px solid;width:500px;height:300px;margin:5px 0;position:relative\">\n              <img src=\"//t1.daumcdn.net/postcode/resource/images/close.png\" id=\"btnFoldWrap\" style=\"cursor:pointer;position:absolute;right:0px;top:-1px;z-index:1\" @click=\"foldDaumPostcode\" alt=\"접기 버튼\">\n            </div>\n            <input type=\"text\" id=\"address\" v-model=\"address\" readonly />\n            <p v-if=\"errors.address\" class=\"error\">{{ errors.address }}</p>\n            <input type=\"text\" id=\"detailedAddress\" v-model=\"detailedAddress\" @input=\"validateDetailedAddress\" />\n            <p v-if=\"errors.detailedAddress\" class=\"error\">{{ errors.detailedAddress }}</p>\n          </td>\n        </tr>\n        <tr>\n          <td style=\"text-align: left\"><label for=\"orderRequest\">배송 요청사항</label></td>\n          <td>\n            <input type=\"text\" id=\"orderRequest\" v-model=\"orderRequest\" placeholder=\" 배송 요청 사항을 입력해 주세요.\" />\n          </td>\n        </tr>\n      </tbody>\n    </table>\n\n    <div class=\"subscription-options\">\n      <label>\n        <input type=\"radio\" v-model=\"subscriptionStatus\" :value=\"true\" />\n        <span class=\"subscription-button\">정기구독</span>\n      </label>\n      <label>\n        <input type=\"radio\" v-model=\"subscriptionStatus\" :value=\"false\" />\n        <span class=\"subscription-button\">한번만 구매하기</span>\n      </label>\n    </div>\n  </div>\n  <div id=\"payment-method\" class=\"w-100\"></div>\n  <div id=\"agreement\" class=\"w-100\"></div>\n  <button id=\"payment-request-button\" @click=\"preparePayment\" class=\"order-button btn btn-green\">결제하기</button>\n  </div>\n  </div>\n</template>\n\n<script>\nimport { mapState, mapActions, mapGetters } from 'vuex';\nimport axios from '../axios';\nimport '../assets/styles.css';\n\nexport default {\n  name: 'OrderPage',\n  data() {\n    return {\n      ownedCouponId: '',\n      recipient: '',\n      postalCode: '',\n      address: '',\n      detailedAddress: '',\n      phoneNumber: '',\n      orderRequest: '',\n      subscriptionStatus: false,\n      discountAmount: 0,\n      shippingFee: 0,\n      totalAmount: 0,\n      usePoints: 0,\n      pointsApplied: false,\n      pointsError: '',\n      totalPoints: 0,\n      tossPayments: null,\n      paymentWidget: null,\n      currentOrderId: null, // 현재 주문 ID를 저장합니다.\n      addressType: 'existing', // 기본값을 기존 배송지로 설정\n      addresses: [], // 기존 배송지 목록\n      selectedAddress: null, // 선택된 기존 배송지\n      errors: {\n        recipient: '',\n        phoneNumber: '',\n        address: '',\n        detailedAddress: ''\n      }\n    };\n  },\n  computed: {\n    ...mapGetters('member', ['memberId']),\n    ...mapState('order', {\n      isLoggedIn: state => state.isLoggedIn,\n      items: state => state.orderDetails,\n      user: state => state.userProfile,\n      coupons: state => state.coupons,\n    }),\n    ...mapState('billing', ['billingKey']), // billingStore에서 billingKey 가져오기\n    shippingFeeMessage() {\n      return this.shippingFee === 0 ? '무료' : `+${this.shippingFee} 원`;\n    }\n  },\n  async created() {\n    await this.fetchUserProfile();\n    await this.fetchCoupons();\n    await this.fetchOrderDetails();\n    await this.fetchBillingKey();\n    this.setRecipientAndPhoneNumber();\n    this.calculateTotalAmount();\n    await this.fetchTotalPoints(); // 총 포인트 가져오기\n    this.fetchAddresses(); // 기존 배송지 목록을 가져오는 함수 호출\n  },\n  methods: {\n    ...mapActions('order', ['fetchUserProfile', 'fetchCoupons', 'fetchOrderDetails', 'placeOrder']),\n    ...mapActions('billing', ['fetchBillingKey']),\n    async fetchTotalPoints() {\n      try {\n        const response = await axios.get('/api/points/totalPoints', { withCredentials: true });\n        this.totalPoints = response.data;\n      } catch (error) {\n        console.error('Error fetching total points:', error);\n      }\n    },\n    fetchAddresses() {\n      // API 호출 또는 데이터를 가져오는 로직\n      this.addresses = [\n        { id: 1, name: '배송지1', recipient: '홍길동', phoneNumber: '010-1234-5678', postalCode: '12345', address: '서울시 강남구', detailedAddress: '역삼동 123-45' },\n        { id: 2, name: '배송지2', recipient: '김철수', phoneNumber: '010-8765-4321', postalCode: '54321', address: '서울시 서초구', detailedAddress: '서초동 67-89' }\n      ];\n    },\n    applyCoupon() {\n      const selectedCoupon = this.coupons.find(coupon => coupon.ownedCouponId === this.ownedCouponId);\n      this.discountAmount = selectedCoupon ? selectedCoupon.discountAmount : 0;\n      this.calculateTotalAmount();\n    },\n    calculateTotalAmount() {\n      const subtotal = this.items.reduce((total, item) => total + item.price * item.productQuantity, 0);\n      this.shippingFee = subtotal >= 30000 ? 0 : 3000;\n      this.totalAmount = subtotal - this.discountAmount + this.shippingFee - this.usePoints;\n    },\n    setRecipientAndPhoneNumber() {\n      if (this.user) {\n        this.recipient = this.user.name;\n        this.phoneNumber = this.user.phoneNumber;\n      }\n    },\n    applyPoints() {\n      if (this.usePoints < 1000) {\n        this.pointsError = '포인트는 최소 1000포인트부터 사용 가능합니다.';\n        return;\n      }\n      if (this.usePoints > this.totalPoints) {\n        this.pointsError = '포인트가 부족합니다.';\n        return;\n      }\n      this.pointsError = '';\n      this.pointsApplied = true;\n      this.calculateTotalAmount();\n    },\n    validateRecipient() {\n      this.errors.recipient = this.recipient ? '' : '이름을 입력해주세요.';\n    },\n    validatePhoneNumber() {\n      this.errors.phoneNumber = this.phoneNumber ? '' : '연락처를 입력해주세요.';\n    },\n    validateAddress() {\n      if (this.postalCode && this.address) {\n        this.errors.address = '';\n      } else {\n        this.errors.address = '주소를 등록해주세요.';\n      }\n    },\n    validateDetailedAddress() {\n      this.errors.detailedAddress = this.detailedAddress ? '' : '나머지 주소를 입력해주세요.';\n    },\n    validateForm() {\n      this.validateRecipient();\n      this.validatePhoneNumber();\n      this.validateAddress();\n      this.validateDetailedAddress();\n\n      return !this.errors.recipient &&\n        !this.errors.phoneNumber &&\n        !this.errors.address &&\n        !this.errors.detailedAddress;\n    },\n    async preparePayment() {\n      if (!this.validateForm()) {\n        return;\n      }\n\n      const orderDetails = {\n        items: this.items,\n        totalAmount: this.totalAmount,\n        recipient: this.recipient,\n        postalCode: this.postalCode,\n        address: this.address,\n        detailedAddress: this.detailedAddress,\n        phoneNumber: this.phoneNumber,\n        orderRequest: this.orderRequest,\n        ownedCouponId: this.ownedCouponId || null,\n        subscriptionStatus: this.subscriptionStatus,\n        pointsToUse: this.usePoints // 포인트 사용 정보 추가\n      };\n\n      try {\n        const orderResponse = await this.placeOrder(orderDetails);\n\n        if (orderResponse.status === 201) {\n          this.currentOrderId = orderResponse.data.orderNo;\n          console.log('Current Order:', this.$store.state.order.currentOrder); // 로깅 추가\n          // localStorage에 currentOrder 저장\n          localStorage.setItem('currentOrder', JSON.stringify(this.$store.state.order.currentOrder));\n          \n          if (this.subscriptionStatus) {\n              if(this.billingKey) {\n                this.$router.push({ name: 'ApprovePayment' }); // 결제 성공 페이지로 이동\n              } else {\n                await this.initializeTossPayments();\n                this.setupBillingAuth(this.currentOrderId); // 정기 결제\n              }\n          } else {\n            await this.initializeTossPayments();\n            this.setupTossPayments(this.currentOrderId); // 일반 결제\n          }\n        } else {\n          console.error('주문 생성 실패:', orderResponse);\n          alert('주문 생성 중 오류가 발생했습니다. 다시 시도하세요.');\n        }\n      } catch (error) {\n        console.error('결제 준비 중 오류:', error);\n        alert('결제 준비 중 오류가 발생했습니다. 다시 시도하세요.');\n      }\n    },\n    initializeTossPayments() {\n      return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.src = 'https://js.tosspayments.com/v1/payment';\n        script.onload = resolve;\n        script.onerror = reject;\n        document.head.appendChild(script);\n      });\n    },\n    async setupTossPayments(orderId) {\n      const clientKey = await this.fetchClientKey();\n      if (!clientKey) {\n        console.error('Client key is not defined');\n        return;\n      }\n\n      if (!window.TossPayments) {\n        console.error('TossPayments is not loaded');\n        return;\n      }\n\n      this.tossPayments = window.TossPayments(clientKey);\n\n      const paymentRequest = {\n        amount: this.totalAmount,\n        orderId: orderId,\n        orderName: 'Order Name',\n        customerName: this.recipient,\n        successUrl: `${window.location.origin}/payment/success`,\n        failUrl: `${window.location.origin}/payment/fail`\n      };\n\n      try {\n        const response = await this.tossPayments.requestPayment('카드', paymentRequest);\n        const paymentKey = response.paymentKey;\n        const successUrl = `${window.location.origin}/payment/success?orderId=${orderId}&amount=${this.totalAmount}&paymentKey=${paymentKey}`;\n        window.location.href = successUrl; // 결제 성공 페이지로 이동\n      } catch (error) {\n        console.error('결제 요청 오류:', error);\n        alert('결제 요청 중 오류가 발생했습니다. 다시 시도하세요.');\n        await this.cancelOrder(orderId); // 결제 요청 오류 발생 시 주문을 취소합니다.\n      }\n    },\n    async setupBillingAuth(orderId) {\n      const clientKey = await this.fetchClientKey();\n      if (!clientKey) {\n        console.error('Client key is not defined');\n        return;\n      }\n\n      if (!window.TossPayments) {\n        console.error('TossPayments is not loaded');\n        return;\n      }\n\n      this.tossPayments = window.TossPayments(clientKey);\n\n      try {\n        await this.tossPayments.requestBillingAuth('카드', {\n          customerKey: this.memberId, // 구매자 ID\n          successUrl: `${window.location.origin}/payment/card`,\n          failUrl: `${window.location.origin}/payment/fail`\n        });\n\n        // authKey는 successUrl로 이동하면서 전달됨\n      } catch (error) {\n        if (error.code === 'USER_CANCEL') {\n          console.log('결제 고객이 결제창을 닫았습니다.');\n          await this.cancelOrder(orderId); // 결제 취소 시 주문을 취소합니다.\n        } else {\n          console.error('결제 요청 오류:', error);\n          alert('결제 요청 중 오류가 발생했습니다. 다시 시도하세요.');\n          await this.cancelOrder(orderId); // 결제 요청 오류 발생 시 주문을 취소합니다.\n        }\n      }\n    },\n    async fetchClientKey() {\n      try {\n        const response = await axios.get('/api/payment/client-key');\n        return response.data.clientKey;\n      } catch (error) {\n        console.error('Failed to fetch client key:', error);\n      }\n    },\n    async cancelOrder(orderNo) {\n      try {\n        await axios.delete(`/api/orders/cancel/${orderNo}`, { withCredentials: true });\n        alert('주문이 취소되었습니다.');\n      } catch (error) {\n        console.error('주문 취소 중 오류 발생:', error);\n        alert('주문 취소 중 오류가 발생했습니다. 다시 시도하세요.');\n      }\n    },\n    openDaumPostcode() {\n      const elementWrap = this.$refs.wrap;\n      const currentScroll = Math.max(document.body.scrollTop, document.documentElement.scrollTop);\n      new window.daum.Postcode({\n        oncomplete: (data) => {\n          let addr = '';\n          if (data.userSelectedType === 'R') {\n            addr = data.roadAddress;\n          } else {\n            addr = data.jibunAddress;\n          }\n          this.postalCode = data.zonecode;\n          this.address = addr;\n          elementWrap.style.display = 'none';\n          document.body.scrollTop = currentScroll;\n          this.validateAddress(); // 주소 검색 후 유효성 검사\n        },\n        onresize: (size) => {\n          elementWrap.style.height = size.height + 'px';\n        },\n        width: '100%',\n        height: '100%'\n      }).embed(elementWrap);\n      elementWrap.style.display = 'block';\n    },\n    foldDaumPostcode() {\n      const elementWrap = this.$refs.wrap;\n      elementWrap.style.display = 'none';\n    }\n  },\n  watch: {\n    ownedCouponId(newVal) {\n      if (newVal === '') {\n        this.discountAmount = 0;\n      }\n      this.applyCoupon();\n    },\n    recipient() {\n      this.validateRecipient();\n    },\n    phoneNumber() {\n      this.validatePhoneNumber();\n    },\n    detailedAddress() {\n      this.validateDetailedAddress();\n    },\n    postalCode() {\n      this.validateAddress();\n    },\n    address() {\n      this.validateAddress();\n    }\n  }\n};\n</script>\n\n\n<style scoped>\n.item-info {\n  height: 120px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n.item-image{\n  width: 100px;\n  height: 100px;\n  object-fit: cover;\n  border-radius: 8px;\n  margin-right: 30px;\n  overflow: hidden;\n  display: flex;\n  align-items: center; /* 세로 중앙 정렬 */\n  justify-content: center; /* 가로 중앙 정렬 */\n  background: rgb(221, 220, 220);\n}\n\n.item-image img {\n  max-width: 100%;\n  max-height: 100%;\n  object-fit: cover;\n}\n\n.box-container-no-shade label, select, p {\n  margin: 10px;\n}\n\n.btn-container {\n  position: relative;\n  display: inline-block;\n}\n\n.point-wrapper {\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n\n}\n\n.text-info {\n  font-size: 0.9em;\n  color: gray\n}\n\n.postal-code-input {\n  display: flex;\n  align-items: center;\n  width: 300px;\n}\n\n.postal-code-field {\n  margin-right: 10px;\n}\n\n.btn {\n  padding: 5px 10px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.subscription-options {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 20px;\n  margin-bottom: 20px;\n}\n\n.subscription-options label {\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n\n.subscription-options input[type=\"radio\"] {\n  display: none;\n}\n\n.subscription-button {\n  display: inline-block;\n  padding: 10px 20px;\n  border-radius: 20px;\n  background-color: #ddd;\n  color: #333;\n  transition: background-color 0.3s;\n}\n\n.subscription-options input[type=\"radio\"]:checked + .subscription-button {\n  background-color: #B4D9A9;\n  color: white;\n}\n\n.order-button {\n  width: 100%;\n  padding: 10px;\n  background-color: #B4D9A9;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.order-button:hover {\n  background-color: #B4D9A9;\n}\n\n.product-image {\n  width: 200px;\n  height: 200px;\n}\n\n.error {\n  color: red;\n  font-size: 12px;\n  margin-top: 5px;\n}\n\n.radio-container {\n display: flex;\n align-items: center;\n justify-content: flex-start;\n}\n\n.radio-container label {\n  margin-right: 20px; /* 라벨 사이의 간격 조절 */\n}\n\n.radio-container input[type=\"radio\"] {\n  width: 15px;\n  height: 15px;\n  margin-right: 5px; /* 라디오 버튼과 라벨 사이의 간격 조절 */\n}\n\nselect {\n  width: 100; /* select 요소의 너비를 부모 요소에 맞게 설정 */\n  box-sizing: border-box; /* 패딩과 테두리를 포함한 너비 계산 */\n  margin-left: 0;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}