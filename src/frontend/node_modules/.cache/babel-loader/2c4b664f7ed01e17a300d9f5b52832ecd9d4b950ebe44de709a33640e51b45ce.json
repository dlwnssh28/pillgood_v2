{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { mapActions } from 'vuex';\nimport axios from '../axios';\nimport KakaoLogin from '../components/KakaoLogin.vue'; // 카카오 로그인 컴포넌트 추가\nimport '../assets/styles.css';\nfunction saveEmailToLocalStorage(email) {\n  localStorage.setItem('rememberedEmail', email);\n}\nfunction getEmailFromLocalStorage() {\n  return localStorage.getItem('rememberedEmail') || '';\n}\nfunction removeEmailFromLocalStorage() {\n  localStorage.removeItem('rememberedEmail');\n}\nexport default {\n  name: 'LoginView',\n  components: {\n    KakaoLogin // 카카오 로그인 컴포넌트 추가\n  },\n  mounted() {\n    this.checkSessionStatus();\n    this.email = getEmailFromLocalStorage(); // 페이지 로드 시 저장된 이메일 불러오기\n    this.handleKakaoCallback(); // 카카오 로그인 콜백 처리 추가\n  },\n  data() {\n    return {\n      password: '',\n      loginError: '',\n      // 로그인 에러 메시지 상태 추가\n      rememberEmail: !!localStorage.getItem('rememberedEmail'),\n      email: localStorage.getItem('rememberedEmail') || ''\n    };\n  },\n  methods: {\n    ...mapActions('member', ['login', 'clearUserState']),\n    // 'member' 모듈에서 액션 가져오기\n    async handleLogin() {\n      console.log('로그인 시도: ', this.email, this.password);\n      try {\n        await this.login({\n          email: this.email,\n          password: this.password\n        });\n        if (this.$store.state.member.isLoggedIn) {\n          console.log('로그인 성공');\n          alert('로그인 성공');\n          if (this.rememberEmail) {\n            saveEmailToLocalStorage(this.email); // 이메일 기억하기가 체크된 경우 저장\n          } else {\n            removeEmailFromLocalStorage(); // 체크되지 않은 경우 저장된 이메일 삭제\n          }\n          this.$router.push('/'); // 로그인 성공 시 홈으로 이동\n        } else {\n          this.loginError = '로그인에 실패했습니다. 다시 시도해주세요.';\n          alert('로그인 실패. 다시 시도하세요.');\n        }\n      } catch (error) {\n        this.loginError = '로그인 중 오류가 발생했습니다.';\n      }\n    },\n    navigateToRegister() {\n      this.$router.push('/register');\n    },\n    async checkSessionStatus() {\n      try {\n        const response = await axios.get('/api/members/status', {\n          withCredentials: true\n        });\n        console.log(\"서버로부터 상태를 받아옴: \", response.data);\n        if (!response.data.isLoggedIn) {\n          this.$store.dispatch('clearUserState');\n        } else {\n          this.$store.commit('setLoginState', response.data);\n        }\n      } catch (error) {\n        console.error(\"상태 확인 요청 에러: \", error);\n        this.$store.dispatch('clearUserState');\n      }\n    },\n    async handleKakaoCallback() {\n      // 카카오 로그인 콜백 처리 함수 추가\n      const code = this.$route.query.code;\n      if (code) {\n        console.log('카카오 코드:', code);\n        try {\n          const response = await fetch('https://kauth.kakao.com/oauth/token', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n            },\n            body: new URLSearchParams({\n              grant_type: 'authorization_code',\n              client_id: '03f074279f45f35b6bed2cfbcc42ec4d',\n              // REST API 키\n              redirect_uri: 'http://localhost:8080/login',\n              // 리다이렉트 URI\n              code: code\n            }).toString()\n          });\n          const data = await response.json();\n          if (data.access_token) {\n            // 서버에 액세스 토큰을 전달하여 사용자 정보를 가져옵니다.\n            const result = await axios.post('/api/social/kakao/callback', {\n              accessToken: data.access_token\n            });\n            console.log(result.data);\n            // 로그인 성공 후 처리\n            if (result.data.success) {\n              this.$store.commit('member/setLoginState', {\n                isLoggedIn: true,\n                memberId: result.data.memberId,\n                member: result.data.member,\n                isAdmin: result.data.isAdmin\n              });\n              this.$router.push('/');\n            } else {\n              alert('카카오 로그인 실패');\n            }\n          } else {\n            console.error('Failed to fetch access token:', data);\n          }\n        } catch (error) {\n          console.error('Error fetching token:', error);\n        }\n      }\n    },\n    handleKakaoLoginSuccess() {\n      // 카카오 로그인 성공 처리\n      console.log('카카오 로그인 성공');\n    }\n  },\n  watch: {\n    'member.isLoggedIn'(newVal) {\n      // 'member' 모듈의 isLoggedIn 상태 변경 감지\n      console.log('로그인 상태 변경:', newVal);\n    }\n  }\n};","map":{"version":3,"names":["mapActions","axios","KakaoLogin","saveEmailToLocalStorage","email","localStorage","setItem","getEmailFromLocalStorage","getItem","removeEmailFromLocalStorage","removeItem","name","components","mounted","checkSessionStatus","handleKakaoCallback","data","password","loginError","rememberEmail","methods","handleLogin","console","log","login","$store","state","member","isLoggedIn","alert","$router","push","error","navigateToRegister","response","get","withCredentials","dispatch","commit","code","$route","query","fetch","method","headers","body","URLSearchParams","grant_type","client_id","redirect_uri","toString","json","access_token","result","post","accessToken","success","memberId","isAdmin","handleKakaoLoginSuccess","watch","member.isLoggedIn","newVal"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\LoginView.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-container\">\r\n    <div class=\"login-box\">\r\n      <!-- 위쪽 -->\r\n      <div class=\"form-container\">\r\n        <!-- 기존 로그인 폼 -->\r\n        <form @submit.prevent=\"handleLogin\" class=\"login-form\">\r\n          <h4 class=\"text-melon\">로그인</h4>\r\n          <div class=\"input-container\">\r\n            <label for=\"email\" class=\"text-melon\">이메일</label>\r\n            <input type=\"email\" id=\"email\" v-model=\"email\" required />\r\n          </div>\r\n          <div class=\"input-container\">\r\n            <label for=\"password\" class=\"text-melon\">비밀번호</label>\r\n            <input type=\"password\" id=\"password\" v-model=\"password\" required />\r\n          </div>\r\n          <div class=\"btn-container\">\r\n            <button type=\"submit\" class=\"btn btn-green\">로그인</button>\r\n          </div>\r\n        </form>\r\n        <!-- 중앙에 세로 선 -->\r\n        <div class=\"vertical-line\"></div>\r\n        <!-- 카카오 로그인 컴포넌트 추가 -->\r\n        <div class=\"social-container\">\r\n          <h4 class=\"text-melon\">소셜 로그인</h4>\r\n          <KakaoLogin @loginSuccess=\"handleKakaoLoginSuccess\" />\r\n        </div>\r\n      </div>\r\n      <!-- 회원가입 버튼/비밀번호 찾기 -->\r\n      <div class=\"btn-container2\">\r\n        <button type=\"button\" class=\"btn btn-gray\" @click=\"navigateToRegister\">회원가입</button>\r\n      </div>\r\n      <div class=\"check-container\">\r\n        <input id=\"chk_all\" type=\"checkbox\" v-model=\"rememberEmail\">\r\n        <label for=\"chk_all\" class=\"text-gray\">이메일 기억하기</label>\r\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <router-link to=\"/forgotpassword\">비밀번호 재설정</router-link>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex'\r\nimport axios from '../axios'\r\nimport KakaoLogin from '../components/KakaoLogin.vue'; // 카카오 로그인 컴포넌트 추가\r\nimport '../assets/styles.css';\r\n\r\nfunction saveEmailToLocalStorage(email) {\r\n  localStorage.setItem('rememberedEmail', email);\r\n}\r\n\r\nfunction getEmailFromLocalStorage() {\r\n  return localStorage.getItem('rememberedEmail') || '';\r\n}\r\n\r\nfunction removeEmailFromLocalStorage() {\r\n  localStorage.removeItem('rememberedEmail');\r\n}\r\n\r\nexport default {\r\n  name: 'LoginView',\r\n  components: {\r\n    KakaoLogin // 카카오 로그인 컴포넌트 추가\r\n  },\r\n  mounted() {\r\n    this.checkSessionStatus();\r\n    this.email = getEmailFromLocalStorage(); // 페이지 로드 시 저장된 이메일 불러오기\r\n    this.handleKakaoCallback(); // 카카오 로그인 콜백 처리 추가\r\n  },\r\n  data() {\r\n    return {\r\n      password: '',\r\n      loginError: '', // 로그인 에러 메시지 상태 추가\r\n      rememberEmail: !!localStorage.getItem('rememberedEmail'),\r\n      email: localStorage.getItem('rememberedEmail') || ''\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions('member', ['login', 'clearUserState']), // 'member' 모듈에서 액션 가져오기\r\n    async handleLogin() {\r\n      console.log('로그인 시도: ', this.email, this.password);\r\n      try {\r\n        await this.login({ email: this.email, password: this.password });\r\n        if (this.$store.state.member.isLoggedIn) {\r\n          console.log('로그인 성공');\r\n          alert('로그인 성공');\r\n          if (this.rememberEmail) {\r\n            saveEmailToLocalStorage(this.email); // 이메일 기억하기가 체크된 경우 저장\r\n          } else {\r\n            removeEmailFromLocalStorage(); // 체크되지 않은 경우 저장된 이메일 삭제\r\n          }\r\n          this.$router.push('/'); // 로그인 성공 시 홈으로 이동\r\n        } else {\r\n          this.loginError = '로그인에 실패했습니다. 다시 시도해주세요.';\r\n          alert('로그인 실패. 다시 시도하세요.');\r\n        }\r\n      } catch (error) {\r\n        this.loginError = '로그인 중 오류가 발생했습니다.';\r\n      }\r\n    },\r\n    navigateToRegister() {\r\n      this.$router.push('/register');\r\n    },\r\n    async checkSessionStatus() {\r\n      try {\r\n        const response = await axios.get('/api/members/status', { withCredentials: true });\r\n        console.log(\"서버로부터 상태를 받아옴: \", response.data);\r\n        if (!response.data.isLoggedIn) {\r\n          this.$store.dispatch('clearUserState');\r\n        } else {\r\n          this.$store.commit('setLoginState', response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"상태 확인 요청 에러: \", error);\r\n        this.$store.dispatch('clearUserState');\r\n      }\r\n    },\r\n    async handleKakaoCallback() { // 카카오 로그인 콜백 처리 함수 추가\r\n      const code = this.$route.query.code;\r\n      if (code) {\r\n        console.log('카카오 코드:', code);\r\n        try {\r\n          const response = await fetch('https://kauth.kakao.com/oauth/token', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',\r\n            },\r\n            body: new URLSearchParams({\r\n              grant_type: 'authorization_code',\r\n              client_id: '03f074279f45f35b6bed2cfbcc42ec4d', // REST API 키\r\n              redirect_uri: 'http://localhost:8080/login', // 리다이렉트 URI\r\n              code: code,\r\n            }).toString(),\r\n          });\r\n\r\n          const data = await response.json();\r\n          if (data.access_token) {\r\n            // 서버에 액세스 토큰을 전달하여 사용자 정보를 가져옵니다.\r\n            const result = await axios.post('/api/social/kakao/callback', { accessToken: data.access_token });\r\n            console.log(result.data);\r\n            // 로그인 성공 후 처리\r\n            if (result.data.success) {\r\n              this.$store.commit('member/setLoginState', {\r\n                isLoggedIn: true,\r\n                memberId: result.data.memberId,\r\n                member: result.data.member,\r\n                isAdmin: result.data.isAdmin\r\n              });\r\n              this.$router.push('/');\r\n            } else {\r\n              alert('카카오 로그인 실패');\r\n            }\r\n          } else {\r\n            console.error('Failed to fetch access token:', data);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching token:', error);\r\n        }\r\n      }\r\n    },\r\n    handleKakaoLoginSuccess() {\r\n      // 카카오 로그인 성공 처리\r\n      console.log('카카오 로그인 성공');\r\n    }\r\n  },\r\n  watch: {\r\n    'member.isLoggedIn'(newVal) { // 'member' 모듈의 isLoggedIn 상태 변경 감지\r\n      console.log('로그인 상태 변경:', newVal);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.main-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  padding: 20px;\r\n}\r\n\r\n.login-box {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  background-color: #fff;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.form-container,\r\n.social-container {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.login-form {\r\n  width: 100%;\r\n}\r\n\r\n.input-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.input-container label {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.input-container input {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n}\r\n\r\n.btn-container {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.btn-container2 {\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n}\r\n\r\n.check-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.vertical-line {\r\n  width: 80%;\r\n  height: 1px;\r\n  background-color: #B4D9A9;\r\n  margin: 20px 0;\r\n}\r\n\r\n@media (min-width: 1200px) {\r\n  .login-box {\r\n    flex-direction: column; /* 큰 화면에서도 세로 정렬 */\r\n    justify-content: space-between;\r\n    max-width: 1200px;\r\n    height: auto;\r\n  }\r\n\r\n  .form-container {\r\n    display: flex;\r\n    flex-direction: row; /* 가로 정렬 */\r\n    justify-content: space-between;\r\n    width: 100%;\r\n  }\r\n\r\n .vertical-line {\r\n  width: 20%;\r\n  height: 1px;\r\n  background-color: #B4D9A9;\r\n  rotate: 90deg;\r\n}\r\n\r\n  .form-container .login-form,\r\n  .form-container .social-container {\r\n    width: 45%;\r\n  }\r\n\r\n  .btn-container2,\r\n  .check-container {\r\n    width: 100%;\r\n    text-align: center;\r\n  }\r\n\r\n  .check-container {\r\n    justify-content: center;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}