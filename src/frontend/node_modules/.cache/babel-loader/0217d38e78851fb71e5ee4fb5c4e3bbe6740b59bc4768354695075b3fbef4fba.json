{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from '../axios';\nexport default {\n  props: {\n    refundAmount: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      orderNo: this.$route.query.orderNo,\n      requestType: this.$route.query.requestType || '반품',\n      detailedReason: '상세 사유는 선택사항입니다.',\n      bankName: '',\n      accountNumber: '',\n      accountHolder: '',\n      refundStatus: '환불대기' // 기본값 설정\n    };\n  },\n  methods: {\n    clearTextArea() {\n      if (this.detailedReason === '상세 사유는 선택사항입니다.') {\n        this.detailedReason = '';\n      }\n    },\n    async handleSubmit() {\n      const refundData = {\n        refundRequestDate: new Date(),\n        refundCompleteDate: null,\n        orderDate: this.$route.query.orderDate,\n        totalRefundAmount: this.refundAmount,\n        refundMethod: this.requestType,\n        refundBank: this.bankName,\n        refundAccount: this.accountNumber,\n        accountHolder: this.accountHolder,\n        refundStatus: this.refundStatus,\n        orderNo: this.orderNo,\n        userId: this.$store.state.member.id\n      };\n      try {\n        const response = await axios.post('/api/refunds/create', refundData);\n        console.log('환불 정보가 성공적으로 저장되었습니다:', response.data);\n        this.$router.push({\n          name: 'RefundDetail',\n          params: {\n            orderNo: refundData.orderNo\n          }\n        });\n      } catch (error) {\n        console.error('환불 정보 저장 중 오류가 발생했습니다:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","props","refundAmount","type","Number","required","data","orderNo","$route","query","requestType","detailedReason","bankName","accountNumber","accountHolder","refundStatus","methods","clearTextArea","handleSubmit","refundData","refundRequestDate","Date","refundCompleteDate","orderDate","totalRefundAmount","refundMethod","refundBank","refundAccount","userId","$store","state","member","id","response","post","console","log","$router","push","name","params","error"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\RefundCreate.vue"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <div class=\"box-container box-shadow\">\n      <h2 class=\"order-no\">{{ orderNo }}</h2>\n      <div class=\"return-exchange-info\">\n        <div class=\"return-exchange-title\">\n          반품/환불 안내\n        </div>\n        <p class=\"return-exchange-description\">\n          반품 및 환불 신청 페이지에 모든 항목을 기재하신 후, 상품을 우체국으로 이용해 착불로 보내주세요.\n        </p>\n      </div>\n\n      <form @submit.prevent=\"handleSubmit\">\n        <div class=\"form-group check-container\">\n          <label><input type=\"radio\" v-model=\"requestType\" value=\"반품\"> 반품</label>\n          <label><input type=\"radio\" v-model=\"requestType\" value=\"환불\"> 환불</label>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>상세 사유 입력 (선택사항)</label>\n          <textarea v-model=\"detailedReason\" @focus=\"clearTextArea\"></textarea>\n        </div>\n        \n        <div class=\"form-group\">\n          <label>은행명</label>\n          <input v-model=\"bankName\" type=\"text\">\n        </div>\n        \n        <div class=\"form-group\">\n          <label>계좌번호</label>\n          <input v-model=\"accountNumber\" type=\"text\">\n        </div>\n        \n        <div class=\"form-group\">\n          <label>예금주</label>\n          <input v-model=\"accountHolder\" type=\"text\">\n        </div>\n        <button class=\"btn btn-green\" type=\"submit\">제출</button>\n      </form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from '../axios';\n\nexport default {\n  props: {\n    refundAmount: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      orderNo: this.$route.query.orderNo,\n      requestType: this.$route.query.requestType || '반품',\n      detailedReason: '상세 사유는 선택사항입니다.',\n      bankName: '',\n      accountNumber: '',\n      accountHolder: '',\n      refundStatus: '환불대기' // 기본값 설정\n    };\n  },\n  methods: {\n    clearTextArea() {\n      if (this.detailedReason === '상세 사유는 선택사항입니다.') {\n        this.detailedReason = '';\n      }\n    },\n    async handleSubmit() {\n      const refundData = {\n        refundRequestDate: new Date(),\n        refundCompleteDate: null,\n        orderDate: this.$route.query.orderDate,\n        totalRefundAmount: this.refundAmount,\n        refundMethod: this.requestType,\n        refundBank: this.bankName,\n        refundAccount: this.accountNumber,\n        accountHolder: this.accountHolder,\n        refundStatus: this.refundStatus,\n        orderNo: this.orderNo,\n        userId: this.$store.state.member.id\n      };\n\n      try {\n        const response = await axios.post('/api/refunds/create', refundData);\n        console.log('환불 정보가 성공적으로 저장되었습니다:', response.data);\n        this.$router.push({ name: 'RefundDetail', params: { orderNo: refundData.orderNo } });\n      } catch (error) {\n        console.error('환불 정보 저장 중 오류가 발생했습니다:', error);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.main-container {\n  padding: 20px;\n}\n</style>\n"],"mappings":";AA6CA,OAAOA,KAAI,MAAO,UAAU;AAE5B,eAAe;EACbC,KAAK,EAAE;IACLC,YAAY,EAAE;MACZC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACF,OAAO;MAClCG,WAAW,EAAE,IAAI,CAACF,MAAM,CAACC,KAAK,CAACC,WAAU,IAAK,IAAI;MAClDC,cAAc,EAAE,iBAAiB;MACjCC,QAAQ,EAAE,EAAE;MACZC,aAAa,EAAE,EAAE;MACjBC,aAAa,EAAE,EAAE;MACjBC,YAAY,EAAE,MAAK,CAAE;IACvB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,aAAaA,CAAA,EAAG;MACd,IAAI,IAAI,CAACN,cAAa,KAAM,iBAAiB,EAAE;QAC7C,IAAI,CAACA,cAAa,GAAI,EAAE;MAC1B;IACF,CAAC;IACD,MAAMO,YAAYA,CAAA,EAAG;MACnB,MAAMC,UAAS,GAAI;QACjBC,iBAAiB,EAAE,IAAIC,IAAI,CAAC,CAAC;QAC7BC,kBAAkB,EAAE,IAAI;QACxBC,SAAS,EAAE,IAAI,CAACf,MAAM,CAACC,KAAK,CAACc,SAAS;QACtCC,iBAAiB,EAAE,IAAI,CAACtB,YAAY;QACpCuB,YAAY,EAAE,IAAI,CAACf,WAAW;QAC9BgB,UAAU,EAAE,IAAI,CAACd,QAAQ;QACzBe,aAAa,EAAE,IAAI,CAACd,aAAa;QACjCC,aAAa,EAAE,IAAI,CAACA,aAAa;QACjCC,YAAY,EAAE,IAAI,CAACA,YAAY;QAC/BR,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBqB,MAAM,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,MAAM,CAACC;MACnC,CAAC;MAED,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMjC,KAAK,CAACkC,IAAI,CAAC,qBAAqB,EAAEf,UAAU,CAAC;QACpEgB,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,QAAQ,CAAC3B,IAAI,CAAC;QACnD,IAAI,CAAC+B,OAAO,CAACC,IAAI,CAAC;UAAEC,IAAI,EAAE,cAAc;UAAEC,MAAM,EAAE;YAAEjC,OAAO,EAAEY,UAAU,CAACZ;UAAQ;QAAE,CAAC,CAAC;MACtF,EAAE,OAAOkC,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}