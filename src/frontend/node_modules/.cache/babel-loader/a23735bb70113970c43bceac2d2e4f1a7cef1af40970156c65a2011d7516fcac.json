{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, resolveComponent as _resolveComponent, createVNode as _createVNode, vModelCheckbox as _vModelCheckbox, createTextVNode as _createTextVNode, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-61452b38\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"main-container\"\n};\nconst _hoisted_2 = {\n  class: \"login-box\"\n};\nconst _hoisted_3 = {\n  class: \"form-container\"\n};\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h4\", {\n  class: \"text-melon\"\n}, \"로그인\", -1));\nconst _hoisted_5 = {\n  class: \"input-container\"\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"email\",\n  class: \"text-melon\"\n}, \"이메일\", -1));\nconst _hoisted_7 = {\n  class: \"input-container\"\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"password\",\n  class: \"text-melon\"\n}, \"비밀번호\", -1));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"btn-container\"\n}, [/*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\",\n  class: \"btn btn-green\"\n}, \"로그인\")], -1));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"vertical-line\"\n}, null, -1));\nconst _hoisted_11 = {\n  class: \"social-container\"\n};\nconst _hoisted_12 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h4\", {\n  class: \"text-melon\"\n}, \"소셜 로그인\", -1));\nconst _hoisted_13 = {\n  class: \"btn-container2\"\n};\nconst _hoisted_14 = {\n  class: \"check-container\"\n};\nconst _hoisted_15 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"chk_all\",\n  class: \"text-gray\"\n}, \"이메일 기억하기\", -1));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_KakaoLogin = _resolveComponent(\"KakaoLogin\");\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.handleLogin && $options.handleLogin(...args), [\"prevent\"])),\n    class: \"login-form\"\n  }, [_hoisted_4, _createElementVNode(\"div\", _hoisted_5, [_hoisted_6, _withDirectives(_createElementVNode(\"input\", {\n    type: \"email\",\n    id: \"email\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event),\n    required: \"\"\n  }, null, 512), [[_vModelText, $data.email]])]), _createElementVNode(\"div\", _hoisted_7, [_hoisted_8, _withDirectives(_createElementVNode(\"input\", {\n    type: \"password\",\n    id: \"password\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event),\n    required: \"\"\n  }, null, 512), [[_vModelText, $data.password]])]), _hoisted_9], 32), _hoisted_10, _createElementVNode(\"div\", _hoisted_11, [_hoisted_12, _createVNode(_component_KakaoLogin, {\n    onLoginSuccess: $options.handleKakaoLoginSuccess\n  }, null, 8, [\"onLoginSuccess\"])])]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-gray\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.navigateToRegister && $options.navigateToRegister(...args))\n  }, \"회원가입\")]), _createElementVNode(\"div\", _hoisted_14, [_withDirectives(_createElementVNode(\"input\", {\n    id: \"chk_all\",\n    type: \"checkbox\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.rememberEmail = $event)\n  }, null, 512), [[_vModelCheckbox, $data.rememberEmail]]), _hoisted_15, _createTextVNode(\"      |      \"), _createVNode(_component_router_link, {\n    to: \"/forgotpassword\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"비밀번호 재설정\")]),\n    _: 1\n  })])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","type","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","onSubmit","_cache","_withModifiers","args","$options","handleLogin","_hoisted_4","_hoisted_5","_hoisted_6","id","$event","$data","email","required","_hoisted_7","_hoisted_8","password","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_createVNode","_component_KakaoLogin","onLoginSuccess","handleKakaoLoginSuccess","_hoisted_13","onClick","navigateToRegister","_hoisted_14","rememberEmail","_hoisted_15","_createTextVNode","_component_router_link","to","default","_withCtx","_"],"sources":["C:\\Users\\woori\\IdeaProjects\\pillgood_v2\\src\\frontend\\src\\views\\LoginView.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-container\">\r\n    <div class=\"login-box\">\r\n      <!-- 위쪽 -->\r\n      <div class=\"form-container\">\r\n        <!-- 기존 로그인 폼 -->\r\n        <form @submit.prevent=\"handleLogin\" class=\"login-form\">\r\n          <h4 class=\"text-melon\">로그인</h4>\r\n          <div class=\"input-container\">\r\n            <label for=\"email\" class=\"text-melon\">이메일</label>\r\n            <input type=\"email\" id=\"email\" v-model=\"email\" required />\r\n          </div>\r\n          <div class=\"input-container\">\r\n            <label for=\"password\" class=\"text-melon\">비밀번호</label>\r\n            <input type=\"password\" id=\"password\" v-model=\"password\" required />\r\n          </div>\r\n          <div class=\"btn-container\">\r\n            <button type=\"submit\" class=\"btn btn-green\">로그인</button>\r\n          </div>\r\n        </form>\r\n        <!-- 중앙에 세로 선 -->\r\n        <div class=\"vertical-line\"></div>\r\n        <!-- 카카오 로그인 컴포넌트 추가 -->\r\n        <div class=\"social-container\">\r\n          <h4 class=\"text-melon\">소셜 로그인</h4>\r\n          <KakaoLogin @loginSuccess=\"handleKakaoLoginSuccess\" />\r\n        </div>\r\n      </div>\r\n      <!-- 회원가입 버튼/비밀번호 찾기 -->\r\n      <div class=\"btn-container2\">\r\n        <button type=\"button\" class=\"btn btn-gray\" @click=\"navigateToRegister\">회원가입</button>\r\n      </div>\r\n      <div class=\"check-container\">\r\n        <input id=\"chk_all\" type=\"checkbox\" v-model=\"rememberEmail\">\r\n        <label for=\"chk_all\" class=\"text-gray\">이메일 기억하기</label>\r\n        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n        <router-link to=\"/forgotpassword\">비밀번호 재설정</router-link>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex'\r\nimport axios from '../axios'\r\nimport KakaoLogin from '../components/KakaoLogin.vue'; // 카카오 로그인 컴포넌트 추가\r\nimport '../assets/styles.css';\r\n\r\nfunction saveEmailToLocalStorage(email) {\r\n  localStorage.setItem('rememberedEmail', email);\r\n}\r\n\r\nfunction getEmailFromLocalStorage() {\r\n  return localStorage.getItem('rememberedEmail') || '';\r\n}\r\n\r\nfunction removeEmailFromLocalStorage() {\r\n  localStorage.removeItem('rememberedEmail');\r\n}\r\n\r\nexport default {\r\n  name: 'LoginView',\r\n  components: {\r\n    KakaoLogin // 카카오 로그인 컴포넌트 추가\r\n  },\r\n  mounted() {\r\n    this.checkSessionStatus();\r\n    this.email = getEmailFromLocalStorage(); // 페이지 로드 시 저장된 이메일 불러오기\r\n    this.handleKakaoCallback(); // 카카오 로그인 콜백 처리 추가\r\n  },\r\n  data() {\r\n    return {\r\n      password: '',\r\n      loginError: '', // 로그인 에러 메시지 상태 추가\r\n      rememberEmail: !!localStorage.getItem('rememberedEmail'),\r\n      email: localStorage.getItem('rememberedEmail') || ''\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions('member', ['login', 'clearUserState']), // 'member' 모듈에서 액션 가져오기\r\n    async handleLogin() {\r\n      console.log('로그인 시도: ', this.email, this.password);\r\n      try {\r\n        await this.login({ email: this.email, password: this.password });\r\n        if (this.$store.state.member.isLoggedIn) {\r\n          console.log('로그인 성공');\r\n          alert('로그인 성공');\r\n          if (this.rememberEmail) {\r\n            saveEmailToLocalStorage(this.email); // 이메일 기억하기가 체크된 경우 저장\r\n          } else {\r\n            removeEmailFromLocalStorage(); // 체크되지 않은 경우 저장된 이메일 삭제\r\n          }\r\n          this.$router.push('/'); // 로그인 성공 시 홈으로 이동\r\n        } else {\r\n          this.loginError = '로그인에 실패했습니다. 다시 시도해주세요.';\r\n          alert('로그인 실패. 다시 시도하세요.');\r\n        }\r\n      } catch (error) {\r\n        this.loginError = '로그인 중 오류가 발생했습니다.';\r\n      }\r\n    },\r\n    navigateToRegister() {\r\n      this.$router.push('/register');\r\n    },\r\n    async checkSessionStatus() {\r\n      try {\r\n        const response = await axios.get('/api/members/status', { withCredentials: true });\r\n        console.log(\"서버로부터 상태를 받아옴: \", response.data);\r\n        if (!response.data.isLoggedIn) {\r\n          this.$store.dispatch('clearUserState');\r\n        } else {\r\n          this.$store.commit('setLoginState', response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"상태 확인 요청 에러: \", error);\r\n        this.$store.dispatch('clearUserState');\r\n      }\r\n    },\r\n    async handleKakaoCallback() { // 카카오 로그인 콜백 처리 함수 추가\r\n      const code = this.$route.query.code;\r\n      if (code) {\r\n        console.log('카카오 코드:', code);\r\n        try {\r\n          const response = await fetch('https://kauth.kakao.com/oauth/token', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',\r\n            },\r\n            body: new URLSearchParams({\r\n              grant_type: 'authorization_code',\r\n              client_id: '03f074279f45f35b6bed2cfbcc42ec4d', // REST API 키\r\n              redirect_uri: 'http://localhost:8080/login', // 리다이렉트 URI\r\n              code: code,\r\n            }).toString(),\r\n          });\r\n\r\n          const data = await response.json();\r\n          if (data.access_token) {\r\n            // 서버에 액세스 토큰을 전달하여 사용자 정보를 가져옵니다.\r\n            const result = await axios.post('/api/social/kakao/callback', { accessToken: data.access_token });\r\n            console.log(result.data);\r\n            // 로그인 성공 후 처리\r\n            if (result.data.success) {\r\n              this.$store.commit('member/setLoginState', {\r\n                isLoggedIn: true,\r\n                memberId: result.data.memberId,\r\n                member: result.data.member,\r\n                isAdmin: result.data.isAdmin\r\n              });\r\n              this.$router.push('/');\r\n            } else {\r\n              alert('카카오 로그인 실패');\r\n            }\r\n          } else {\r\n            console.error('Failed to fetch access token:', data);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching token:', error);\r\n        }\r\n      }\r\n    },\r\n    handleKakaoLoginSuccess() {\r\n      // 카카오 로그인 성공 처리\r\n      console.log('카카오 로그인 성공');\r\n    }\r\n  },\r\n  watch: {\r\n    'member.isLoggedIn'(newVal) { // 'member' 모듈의 isLoggedIn 상태 변경 감지\r\n      console.log('로그인 상태 변경:', newVal);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.main-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  padding: 20px;\r\n}\r\n\r\n.login-box {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  background-color: #fff;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.form-container,\r\n.social-container {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.login-form {\r\n  width: 100%;\r\n}\r\n\r\n.input-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.input-container label {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.input-container input {\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n}\r\n\r\n.btn-container {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.btn-container2 {\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n}\r\n\r\n.check-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.vertical-line {\r\n  width: 80%;\r\n  height: 1px;\r\n  background-color: #B4D9A9;\r\n  margin: 20px 0;\r\n}\r\n\r\n@media (min-width: 1200px) {\r\n  .login-box {\r\n    flex-direction: column; /* 큰 화면에서도 세로 정렬 */\r\n    justify-content: space-between;\r\n    max-width: 1200px;\r\n    height: auto;\r\n  }\r\n\r\n  .form-container {\r\n    display: flex;\r\n    flex-direction: row; /* 가로 정렬 */\r\n    justify-content: space-between;\r\n    width: 100%;\r\n  }\r\n\r\n .vertical-line {\r\n  width: 20%;\r\n  height: 1px;\r\n  background-color: #B4D9A9;\r\n  rotate: 90deg;\r\n}\r\n\r\n  .form-container .login-form,\r\n  .form-container .social-container {\r\n    width: 45%;\r\n  }\r\n\r\n  .btn-container2,\r\n  .check-container {\r\n    width: 100%;\r\n    text-align: center;\r\n  }\r\n\r\n  .check-container {\r\n    justify-content: center;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}