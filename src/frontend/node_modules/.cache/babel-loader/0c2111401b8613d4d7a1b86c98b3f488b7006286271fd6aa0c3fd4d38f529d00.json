{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport axios from '@/axios';\nimport store from '../index';\nconst state = {\n  survey: {\n    name: '',\n    age: null,\n    gender: '',\n    height: null,\n    weight: null,\n    memberUniqueId: '',\n    deficiencyId1: null,\n    deficiencyId2: null,\n    deficiencyId3: null\n  },\n  selectedDeficiencies: [],\n  recommendedProducts: [],\n  surveyQuestions: [],\n  surveyAnswers: [],\n  selectedAnswers: {},\n  detailedAnswers: {},\n  deficiencies: [],\n  isLoading: false,\n  currentStep: 'personal-info',\n  currentQuestionIndex: 0,\n  currentDetailedQuestionIndex: 0,\n  currentDetailedQuestions: {},\n  surveyResult: null,\n  ageGroupDeficiencyData: [] // 추가된 부분\n};\nconst mutations = {\n  setSurvey(state, payload) {\n    state.survey = payload;\n  },\n  setSurveyQuestions(state, questions) {\n    state.surveyQuestions = questions;\n  },\n  setSurveyAnswers(state, answers) {\n    state.surveyAnswers = answers;\n  },\n  setSelectedAnswers(state, {\n    questionId,\n    answerId\n  }) {\n    if (!Array.isArray(state.selectedAnswers[questionId])) {\n      state.selectedAnswers[questionId] = [];\n    }\n    const selectedAnswers = state.selectedAnswers[questionId];\n    const index = selectedAnswers.indexOf(answerId);\n    if (index > -1) {\n      selectedAnswers.splice(index, 1);\n    } else {\n      selectedAnswers.push(answerId);\n    }\n    console.log('Updated selectedAnswers:', state.selectedAnswers); // 디버그 로그 추가\n  },\n  setDetailedAnswers(state, answers) {\n    state.detailedAnswers = answers;\n  },\n  setLoading(state, isLoading) {\n    state.isLoading = isLoading;\n  },\n  setCurrentStep(state, step) {\n    state.currentStep = step;\n  },\n  setCurrentQuestionIndex(state, index) {\n    state.currentQuestionIndex = index;\n  },\n  setCurrentDetailedQuestionIndex(state, index) {\n    state.currentDetailedQuestionIndex = index;\n  },\n  setCurrentDetailedQuestions(state, questions) {\n    state.currentDetailedQuestions = questions;\n  },\n  setSurveyResult(state, surveyData) {\n    state.surveyResult = surveyData;\n  },\n  setSelectedDeficiencies(state, deficiencies) {\n    state.selectedDeficiencies = deficiencies;\n  },\n  setRecommendedProducts(state, products) {\n    state.recommendedProducts = products;\n  },\n  setDeficiencies(state, deficiencies) {\n    state.deficiencies = deficiencies;\n  },\n  setAgeGroupDeficiencyData(state, data) {\n    // 추가된 부분\n    state.ageGroupDeficiencyData = data;\n  }\n};\nconst actions = {\n  async loadSurveyData({\n    commit\n  }) {\n    commit('setLoading', true);\n    try {\n      const [questionsResponse, answersResponse, detailedQuestionsResponse] = await Promise.all([axios.get('/api/questions/list'), axios.get('/api/surveyanswers/list'), axios.get('/api/detailed-questions/list')]);\n      const surveyQuestions = questionsResponse.data.map(question => {\n        const questionAnswers = answersResponse.data.filter(answer => answer.question_id === question.question_id);\n        const matchedDetailedQuestions = new Set();\n        questionAnswers.forEach(answer => {\n          detailedQuestionsResponse.data.forEach(dq => {\n            if (dq.deficiency_id === answer.deficiency_id) {\n              matchedDetailedQuestions.add(JSON.stringify(dq));\n            }\n          });\n        });\n        return {\n          ...question,\n          detailedQuestions: Array.from(matchedDetailedQuestions).map(dq => JSON.parse(dq))\n        };\n      });\n      const allDetailedQuestions = surveyQuestions.flatMap(q => q.detailedQuestions);\n      const uniqueDetailedQuestions = Array.from(new Set(allDetailedQuestions.map(dq => JSON.stringify(dq)))).map(str => JSON.parse(str));\n      console.log('Number of Detailed Questions after mapping:', uniqueDetailedQuestions.length);\n      commit('setSurveyQuestions', surveyQuestions);\n      commit('setSurveyAnswers', answersResponse.data);\n    } catch (error) {\n      console.error('Failed to initialize survey:', error);\n    } finally {\n      commit('setLoading', false);\n    }\n  },\n  nextStep({\n    commit,\n    state,\n    dispatch\n  }) {\n    if (state.currentStep === 'personal-info') {\n      commit('setCurrentStep', 'questions');\n    } else if (state.currentStep === 'questions' && state.currentQuestionIndex < state.surveyQuestions.length - 1) {\n      commit('setCurrentQuestionIndex', state.currentQuestionIndex + 1);\n    } else if (state.currentStep === 'questions' && state.currentQuestionIndex === state.surveyQuestions.length - 1) {\n      const selectedDeficiencies = Object.values(state.selectedAnswers).flatMap(answerIds => {\n        return answerIds.map(answerId => {\n          const answer = state.surveyAnswers.find(a => a.id === answerId);\n          return answer ? answer.deficiencyId : null;\n        }).filter(id => id !== null);\n      });\n      const allDetailedQuestionsSet = new Set();\n      state.surveyQuestions.forEach(q => {\n        q.detailedQuestions.forEach(dq => {\n          if (selectedDeficiencies.includes(dq.deficiencyId)) {\n            allDetailedQuestionsSet.add(JSON.stringify(dq));\n          }\n        });\n      });\n      const allDetailedQuestions = Array.from(allDetailedQuestionsSet).map(dq => JSON.parse(dq));\n      const filteredDetailedQuestions = allDetailedQuestions.filter(dq => selectedDeficiencies.includes(dq.deficiencyId));\n      const groupedDetailedQuestions = filteredDetailedQuestions.reduce((acc, dq) => {\n        (acc[dq.deficiencyId] = acc[dq.deficiencyId] || []).push(dq);\n        return acc;\n      }, {});\n      commit('setCurrentDetailedQuestions', groupedDetailedQuestions);\n      commit('setCurrentStep', 'detailed-questions');\n      commit('setCurrentDetailedQuestionIndex', 0);\n    } else if (state.currentStep === 'detailed-questions') {\n      const totalDetailedQuestionsGroups = Object.keys(state.currentDetailedQuestions).length;\n      if (state.currentDetailedQuestionIndex < totalDetailedQuestionsGroups - 1) {\n        commit('setCurrentDetailedQuestionIndex', state.currentDetailedQuestionIndex + 1);\n      } else if (state.currentDetailedQuestionIndex === totalDetailedQuestionsGroups - 1) {\n        dispatch('finishSurvey');\n      }\n    }\n  },\n  previousStep({\n    commit,\n    state\n  }) {\n    if (state.currentStep === 'detailed-questions' && state.currentDetailedQuestionIndex > 0) {\n      commit('setCurrentDetailedQuestionIndex', state.currentDetailedQuestionIndex - 1);\n    } else if (state.currentStep === 'detailed-questions' && state.currentDetailedQuestionIndex === 0) {\n      commit('setCurrentStep', 'questions');\n    } else if (state.currentStep === 'questions' && state.currentQuestionIndex > 0) {\n      commit('setCurrentQuestionIndex', state.currentQuestionIndex - 1);\n    } else {\n      commit('setCurrentStep', 'personal-info');\n    }\n  },\n  handleAnswerSelection({\n    commit\n  }, {\n    questionId,\n    answerId\n  }) {\n    // console.log('Handling answer selection:', questionId, answerId);  // 디버그 로그 추가\n    commit('setSelectedAnswers', {\n      questionId,\n      answerId\n    });\n  },\n  async fetchDeficiencies({\n    commit\n  }) {\n    try {\n      const response = await axios.get('/api/deficiencies/list');\n      commit('setDeficiencies', response.data);\n    } catch (error) {\n      console.error('Failed to fetch deficiencies:', error);\n    }\n  },\n  async fetchProductsByDeficiency({\n    commit\n  }, deficiencyIds) {\n    try {\n      // 디버깅 로그 추가\n      // console.log('fetchProductsByDeficiency called with:', deficiencyIds);\n\n      // deficiencyIds가 배열인지 확인하고, 배열로 변환\n      if (!Array.isArray(deficiencyIds)) {\n        deficiencyIds = [deficiencyIds];\n      }\n\n      // 디버깅 로그 추가\n      // console.log('Converted deficiencyIds to array:', deficiencyIds);\n\n      const response = await axios.get('/api/products/by-deficiency', {\n        params: {\n          deficiencyIds: deficiencyIds.join(',')\n        }\n      });\n      if (response.status === 200) {\n        const products = response.data;\n        console.log('Fetched products by deficiency:', products);\n        commit('setRecommendedProducts', products);\n      } else {\n        console.error('Failed to fetch products by deficiency:', response);\n      }\n    } catch (error) {\n      console.error('Error fetching products by deficiency:', error);\n    }\n  },\n  async finishSurvey({\n    commit,\n    state,\n    dispatch,\n    rootState\n  }) {\n    // 고우리 수정\n    try {\n      // deficiencyNutrients를 초기화\n      await dispatch('deficiency/fetchDeficiencyNutrients', null, {\n        root: true\n      });\n\n      // products 데이터 로드\n      await dispatch('product/fetchProducts', null, {\n        root: true\n      });\n      const deficiencies = Object.values(state.selectedAnswers).flatMap(answerIds => {\n        return answerIds.map(answerId => {\n          const answer = state.surveyAnswers.find(a => a.id === answerId);\n          return answer ? answer.deficiencyId : null;\n        }).filter(id => id !== null);\n      });\n\n      // console.log('Deficiencies:', deficiencies); // 고우리 추가\n\n      // 상세 질문에서 선택된 결핍 ID들을 keywords로 저장\n      const detailedDeficiencies = Object.entries(state.detailedAnswers).flatMap(([questionId, isSelected]) => {\n        if (isSelected) {\n          // detailedQuestions에서 해당 질문 ID와 매칭되는 deficiencyId를 추출\n          const detailedQuestion = Object.values(state.currentDetailedQuestions).flatMap(questions => questions.filter(dq => dq.detailedQuestionId.toString() === questionId));\n          return detailedQuestion.length > 0 ? detailedQuestion.map(dq => dq.deficiencyId) : [];\n        }\n        return [];\n      });\n\n      // 저장되는 답변 확인용\n      // console.log('Selected detailedAnswers:', state.detailedAnswers);\n      // console.log('Extracted detailedDeficiencies:', detailedDeficiencies);\n\n      // 결핍 ID로부터 추천 제품 찾기\n      let recommendedProducts = [];\n      for (const deficiencyId of deficiencies) {\n        await dispatch('survey/fetchProductsByDeficiency', deficiencyId);\n        const fetchedProducts = rootState.product.products.filter(product => product.nutrientId === deficiencyId);\n        recommendedProducts = recommendedProducts.concat(fetchedProducts.map(product => product.productId));\n      }\n\n      // 중복된 값 제거\n      recommendedProducts = [...new Set(recommendedProducts)];\n      // console.log('Recommended Products (unique):', recommendedProducts);\n\n      const uniqueKeywords = Array.from(new Set(detailedDeficiencies)).join(',');\n      // console.log('Keywords:', uniqueKeywords);\n\n      const survey = {\n        name: state.survey.name,\n        age: state.survey.age,\n        gender: state.survey.gender,\n        height: state.survey.height,\n        weight: state.survey.weight,\n        memberUniqueId: store.state.member.memberId,\n        deficiencyId1: deficiencies[0] || null,\n        deficiencyId2: deficiencies[1] || null,\n        deficiencyId3: deficiencies[2] || null,\n        surveyDate: new Date().toISOString(),\n        recommendedProducts: recommendedProducts.join(',') || '',\n        // 추천 제품 저장\n        keywords: uniqueKeywords || ''\n      };\n\n      // console.log('Updating survey data:', survey);  // 업데이트 전 로그 출력\n\n      if (!survey.memberUniqueId) {\n        throw new Error('memberUniqueId가 설정되지 않았습니다.');\n      }\n      const existingSurveys = await dispatch('loadSurveyResult', survey.memberUniqueId);\n      if (existingSurveys && existingSurveys.length > 0) {\n        await dispatch('updateSurvey', {\n          id: existingSurveys[0].surveyNo,\n          survey\n        });\n      } else {\n        await dispatch('sendSurveyData', survey);\n      }\n      commit('setCurrentStep', 'finish');\n    } catch (error) {\n      console.error('Failed to finish survey:', error);\n      alert('설문 완료 중 오류가 발생했습니다. 다시 시도해 주세요.');\n    }\n  },\n  async sendSurveyData(_, survey) {\n    try {\n      await axios.post('/api/surveys/create', survey);\n    } catch (error) {\n      console.error('Failed to send survey data to the server:', error);\n      throw error;\n    }\n  },\n  async updateSurvey(_, {\n    id,\n    survey\n  }) {\n    try {\n      await axios.put(`/api/surveys/update/${id}`, survey);\n    } catch (error) {\n      console.error('Failed to update survey data:', error);\n      throw error;\n    }\n  },\n  async loadSurveyResult({\n    commit\n  }, memberId) {\n    try {\n      const response = await axios.get(`/api/surveys/member/${memberId}`);\n      // console.log('Survey Result Loaded: ', response.data);\n      commit('setSurveyResult', response.data.length ? response.data[0] : null);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to load survey result:', error);\n      return null;\n    }\n  },\n  async fetchAgeGroupDeficiencyData({\n    commit,\n    dispatch,\n    state\n  }) {\n    // 추가된 부분\n    try {\n      // 결핍 데이터를 먼저 가져옵니다.\n      await dispatch('fetchDeficiencies');\n      const response = await axios.get('/api/surveys/age-group-deficiency');\n      const data = response.data;\n      // 결핍 ID와 결핍 이름 간의 매핑을 생성합니다.\n      const deficiencyMap = state.deficiencies.reduce((map, deficiency) => {\n        map[deficiency.deficiencyId] = deficiency.deficiencyName;\n        return map;\n      }, {});\n      console.log('Deficiency Map:', deficiencyMap); // 추가된 로그\n\n      // 결핍 데이터를 결핍 이름으로 매핑합니다.\n      const mappedData = data.map(item => {\n        const ageGroup = item[0];\n        const deficiencyId = item[1];\n        const count = item[2];\n        const deficiencyName = deficiencyMap[deficiencyId] || `Unknown (${deficiencyId})`;\n        return [ageGroup, deficiencyName, count];\n      });\n      console.log('Mapped Data:', mappedData); // 추가된 로그\n\n      commit('setAgeGroupDeficiencyData', mappedData);\n    } catch (error) {\n      console.error('Failed to fetch age group deficiency data:', error);\n    }\n  }\n};\nconst getters = {\n  currentQuestion: state => state.surveyQuestions[state.currentQuestionIndex],\n  currentDetailedQuestionsGroup: state => {\n    const deficiencyIds = Object.keys(state.currentDetailedQuestions);\n    return state.currentDetailedQuestions[deficiencyIds[state.currentDetailedQuestionIndex]] || [];\n  },\n  isLastQuestion: state => state.currentQuestionIndex === state.surveyQuestions.length - 1,\n  isLastDetailedQuestionsGroup: state => state.currentDetailedQuestionIndex === Object.keys(state.currentDetailedQuestions).length - 1,\n  canProceed: (state, getters) => {\n    if (state.currentStep === 'detailed-questions') {\n      return getters.currentDetailedQuestionsGroup.every(dq => state.detailedAnswers[dq.detailedQuestionId] !== undefined);\n    }\n    return state.selectedAnswers[state.surveyQuestions[state.currentQuestionIndex]?.id]?.length > 0;\n  },\n  isPersonalInfoComplete: state => {\n    return state.survey.name && state.survey.age && state.survey.gender && state.survey.height && state.survey.weight;\n  },\n  surveyResult: state => state.surveyResult,\n  recommendedProducts: (state, getters, rootState) => {\n    const productIds = (state.surveyResult?.recommendedProducts || \"\").split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));\n    console.log('Filtering products with IDs:', productIds);\n    console.log('rootState.product.products:', rootState.product.products);\n    return rootState.product.products.filter(product => productIds.includes(product.productId));\n  },\n  ageGroupDeficiencyData: state => state.ageGroupDeficiencyData // 추가된 부분\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","store","state","survey","name","age","gender","height","weight","memberUniqueId","deficiencyId1","deficiencyId2","deficiencyId3","selectedDeficiencies","recommendedProducts","surveyQuestions","surveyAnswers","selectedAnswers","detailedAnswers","deficiencies","isLoading","currentStep","currentQuestionIndex","currentDetailedQuestionIndex","currentDetailedQuestions","surveyResult","ageGroupDeficiencyData","mutations","setSurvey","payload","setSurveyQuestions","questions","setSurveyAnswers","answers","setSelectedAnswers","questionId","answerId","Array","isArray","index","indexOf","splice","push","console","log","setDetailedAnswers","setLoading","setCurrentStep","step","setCurrentQuestionIndex","setCurrentDetailedQuestionIndex","setCurrentDetailedQuestions","setSurveyResult","surveyData","setSelectedDeficiencies","setRecommendedProducts","products","setDeficiencies","setAgeGroupDeficiencyData","data","actions","loadSurveyData","commit","questionsResponse","answersResponse","detailedQuestionsResponse","Promise","all","get","map","question","questionAnswers","filter","answer","question_id","matchedDetailedQuestions","Set","forEach","dq","deficiency_id","add","JSON","stringify","detailedQuestions","from","parse","allDetailedQuestions","flatMap","q","uniqueDetailedQuestions","str","length","error","nextStep","dispatch","Object","values","answerIds","find","a","id","deficiencyId","allDetailedQuestionsSet","includes","filteredDetailedQuestions","groupedDetailedQuestions","reduce","acc","totalDetailedQuestionsGroups","keys","previousStep","handleAnswerSelection","fetchDeficiencies","response","fetchProductsByDeficiency","deficiencyIds","params","join","status","finishSurvey","rootState","root","detailedDeficiencies","entries","isSelected","detailedQuestion","detailedQuestionId","toString","fetchedProducts","product","nutrientId","concat","productId","uniqueKeywords","member","memberId","surveyDate","Date","toISOString","keywords","Error","existingSurveys","surveyNo","alert","sendSurveyData","_","post","updateSurvey","put","loadSurveyResult","fetchAgeGroupDeficiencyData","deficiencyMap","deficiency","deficiencyName","mappedData","item","ageGroup","count","getters","currentQuestion","currentDetailedQuestionsGroup","isLastQuestion","isLastDetailedQuestionsGroup","canProceed","every","undefined","isPersonalInfoComplete","productIds","split","parseInt","trim","isNaN","namespaced"],"sources":["C:/Users/woori/IdeaProjects/pillgood_v2/src/frontend/src/store/modules/surveyStore.js"],"sourcesContent":["import axios from '@/axios';\nimport store from '../index';\n\nconst state = {\n  survey: {\n    name: '',\n    age: null,\n    gender: '',\n    height: null,\n    weight: null,\n    memberUniqueId: '',\n    deficiencyId1: null,\n    deficiencyId2: null,\n    deficiencyId3: null,\n  },\n  selectedDeficiencies: [],\n  recommendedProducts: [],\n  surveyQuestions: [],\n  surveyAnswers: [],\n  selectedAnswers: {},\n  detailedAnswers: {},\n  deficiencies: [],\n  isLoading: false,\n  currentStep: 'personal-info',\n  currentQuestionIndex: 0,\n  currentDetailedQuestionIndex: 0,\n  currentDetailedQuestions: {},\n  surveyResult: null,\n  ageGroupDeficiencyData: [], // 추가된 부분\n};\n\nconst mutations = {\n  setSurvey(state, payload) {\n    state.survey = payload;\n  },\n  setSurveyQuestions(state, questions) {\n    state.surveyQuestions = questions;\n  },\n  setSurveyAnswers(state, answers) {\n    state.surveyAnswers = answers;\n  },\n  setSelectedAnswers(state, { questionId, answerId }) {\n    if (!Array.isArray(state.selectedAnswers[questionId])) {\n      state.selectedAnswers[questionId] = [];\n    }\n    const selectedAnswers = state.selectedAnswers[questionId];\n    const index = selectedAnswers.indexOf(answerId);\n    if (index > -1) {\n      selectedAnswers.splice(index, 1);\n    } else {\n      selectedAnswers.push(answerId);\n    }\n    console.log('Updated selectedAnswers:', state.selectedAnswers);  // 디버그 로그 추가\n  },\n  setDetailedAnswers(state, answers) {\n    state.detailedAnswers = answers;\n  },\n  setLoading(state, isLoading) {\n    state.isLoading = isLoading;\n  },\n  setCurrentStep(state, step) {\n    state.currentStep = step;\n  },\n  setCurrentQuestionIndex(state, index) {\n    state.currentQuestionIndex = index;\n  },\n  setCurrentDetailedQuestionIndex(state, index) {\n    state.currentDetailedQuestionIndex = index;\n  },\n  setCurrentDetailedQuestions(state, questions) {\n    state.currentDetailedQuestions = questions;\n  },\n  setSurveyResult(state, surveyData) {\n    state.surveyResult = surveyData;\n  },\n  setSelectedDeficiencies(state, deficiencies) {\n    state.selectedDeficiencies = deficiencies;\n  },\n  setRecommendedProducts(state, products) {\n    state.recommendedProducts = products;\n  },\n  setDeficiencies(state, deficiencies) {\n    state.deficiencies = deficiencies;\n  },\n  setAgeGroupDeficiencyData(state, data) { // 추가된 부분\n    state.ageGroupDeficiencyData = data;\n  },\n};\n\nconst actions = {\n  async loadSurveyData({ commit }) {\n    commit('setLoading', true);\n    try {\n      const [questionsResponse, answersResponse, detailedQuestionsResponse] = await Promise.all([\n        axios.get('/api/questions/list'),\n        axios.get('/api/surveyanswers/list'),\n        axios.get('/api/detailed-questions/list')\n      ]);\n\n      const surveyQuestions = questionsResponse.data.map(question => {\n        const questionAnswers = answersResponse.data.filter(answer => answer.question_id === question.question_id);\n        const matchedDetailedQuestions = new Set();\n\n        questionAnswers.forEach(answer => {\n          detailedQuestionsResponse.data.forEach(dq => {\n            if (dq.deficiency_id === answer.deficiency_id) {\n              matchedDetailedQuestions.add(JSON.stringify(dq));\n            }\n          });\n        });\n\n        return {\n          ...question,\n          detailedQuestions: Array.from(matchedDetailedQuestions).map(dq => JSON.parse(dq))\n        };\n      });\n\n      const allDetailedQuestions = surveyQuestions.flatMap(q => q.detailedQuestions);\n      const uniqueDetailedQuestions = Array.from(new Set(allDetailedQuestions.map(dq => JSON.stringify(dq)))).map(str => JSON.parse(str));\n\n      console.log('Number of Detailed Questions after mapping:', uniqueDetailedQuestions.length);\n      commit('setSurveyQuestions', surveyQuestions);\n      commit('setSurveyAnswers', answersResponse.data);\n    } catch (error) {\n      console.error('Failed to initialize survey:', error);\n    } finally {\n      commit('setLoading', false);\n    }\n  },\n  nextStep({ commit, state, dispatch }) {\n    if (state.currentStep === 'personal-info') {\n      commit('setCurrentStep', 'questions');\n    } else if (state.currentStep === 'questions' && state.currentQuestionIndex < state.surveyQuestions.length - 1) {\n      commit('setCurrentQuestionIndex', state.currentQuestionIndex + 1);\n    } else if (state.currentStep === 'questions' && state.currentQuestionIndex === state.surveyQuestions.length - 1) {\n      const selectedDeficiencies = Object.values(state.selectedAnswers).flatMap(answerIds => {\n        return answerIds.map(answerId => {\n          const answer = state.surveyAnswers.find(a => a.id === answerId);\n          return answer ? answer.deficiencyId : null;\n        }).filter(id => id !== null);\n      });\n\n      const allDetailedQuestionsSet = new Set();\n      state.surveyQuestions.forEach(q => {\n        q.detailedQuestions.forEach(dq => {\n          if (selectedDeficiencies.includes(dq.deficiencyId)) {\n            allDetailedQuestionsSet.add(JSON.stringify(dq));\n          }\n        });\n      });\n\n      const allDetailedQuestions = Array.from(allDetailedQuestionsSet).map(dq => JSON.parse(dq));\n      const filteredDetailedQuestions = allDetailedQuestions.filter(dq => selectedDeficiencies.includes(dq.deficiencyId));\n\n      const groupedDetailedQuestions = filteredDetailedQuestions.reduce((acc, dq) => {\n        (acc[dq.deficiencyId] = acc[dq.deficiencyId] || []).push(dq);\n        return acc;\n      }, {});\n\n      commit('setCurrentDetailedQuestions', groupedDetailedQuestions);\n      commit('setCurrentStep', 'detailed-questions');\n      commit('setCurrentDetailedQuestionIndex', 0);\n    } else if (state.currentStep === 'detailed-questions') {\n      const totalDetailedQuestionsGroups = Object.keys(state.currentDetailedQuestions).length;\n      if (state.currentDetailedQuestionIndex < totalDetailedQuestionsGroups - 1) {\n        commit('setCurrentDetailedQuestionIndex', state.currentDetailedQuestionIndex + 1);\n      } else if (state.currentDetailedQuestionIndex === totalDetailedQuestionsGroups - 1) {\n        dispatch('finishSurvey');\n      }\n    }\n  },\n  previousStep({ commit, state }) {\n    if (state.currentStep === 'detailed-questions' && state.currentDetailedQuestionIndex > 0) {\n      commit('setCurrentDetailedQuestionIndex', state.currentDetailedQuestionIndex - 1);\n    } else if (state.currentStep === 'detailed-questions' && state.currentDetailedQuestionIndex === 0) {\n      commit('setCurrentStep', 'questions');\n    } else if (state.currentStep === 'questions' && state.currentQuestionIndex > 0) {\n      commit('setCurrentQuestionIndex', state.currentQuestionIndex - 1);\n    } else {\n      commit('setCurrentStep', 'personal-info');\n    }\n  },\n  handleAnswerSelection({ commit }, { questionId, answerId }) {\n    // console.log('Handling answer selection:', questionId, answerId);  // 디버그 로그 추가\n    commit('setSelectedAnswers', { questionId, answerId });\n  },\n  async fetchDeficiencies({ commit }) {\n    try {\n      const response = await axios.get('/api/deficiencies/list');\n      commit('setDeficiencies', response.data);\n    } catch (error) {\n      console.error('Failed to fetch deficiencies:', error);\n    }\n  },\n    async fetchProductsByDeficiency({ commit }, deficiencyIds) {\n      try {\n        // 디버깅 로그 추가\n        // console.log('fetchProductsByDeficiency called with:', deficiencyIds);\n  \n        // deficiencyIds가 배열인지 확인하고, 배열로 변환\n        if (!Array.isArray(deficiencyIds)) {\n          deficiencyIds = [deficiencyIds];\n        }\n  \n        // 디버깅 로그 추가\n        // console.log('Converted deficiencyIds to array:', deficiencyIds);\n  \n        const response = await axios.get('/api/products/by-deficiency', {\n          params: { deficiencyIds: deficiencyIds.join(',') }\n        });\n  \n        if (response.status === 200) {\n          const products = response.data;\n          console.log('Fetched products by deficiency:', products);\n          commit('setRecommendedProducts', products);\n        } else {\n          console.error('Failed to fetch products by deficiency:', response);\n        }\n      } catch (error) {\n        console.error('Error fetching products by deficiency:', error);\n      }\n    },\n  async finishSurvey({ commit, state, dispatch, rootState }) { // 고우리 수정\n    try {\n      // deficiencyNutrients를 초기화\n      await dispatch('deficiency/fetchDeficiencyNutrients', null, { root: true });\n\n      // products 데이터 로드\n      await dispatch('product/fetchProducts', null, { root: true });\n\n      const deficiencies = Object.values(state.selectedAnswers).flatMap(answerIds => {\n        return answerIds.map(answerId => {\n          const answer = state.surveyAnswers.find(a => a.id === answerId);\n          return answer ? answer.deficiencyId : null;\n        }).filter(id => id !== null);\n      });\n\n      // console.log('Deficiencies:', deficiencies); // 고우리 추가\n\n      // 상세 질문에서 선택된 결핍 ID들을 keywords로 저장\n      const detailedDeficiencies = Object.entries(state.detailedAnswers).flatMap(([questionId, isSelected]) => {\n        if (isSelected) {\n          // detailedQuestions에서 해당 질문 ID와 매칭되는 deficiencyId를 추출\n          const detailedQuestion = Object.values(state.currentDetailedQuestions).flatMap(questions => \n            questions.filter(dq => dq.detailedQuestionId.toString() === questionId)\n          );\n          return detailedQuestion.length > 0 ? detailedQuestion.map(dq => dq.deficiencyId) : [];\n        }\n        return [];\n      });\n\n      // 저장되는 답변 확인용\n      // console.log('Selected detailedAnswers:', state.detailedAnswers);\n      // console.log('Extracted detailedDeficiencies:', detailedDeficiencies);\n\n      \n      // 결핍 ID로부터 추천 제품 찾기\n      let recommendedProducts = [];\n\n      for (const deficiencyId of deficiencies) {\n        await dispatch('survey/fetchProductsByDeficiency', deficiencyId);\n        const fetchedProducts = rootState.product.products.filter(product => product.nutrientId === deficiencyId);\n        recommendedProducts = recommendedProducts.concat(fetchedProducts.map(product => product.productId));\n      }\n\n      // 중복된 값 제거\n      recommendedProducts = [...new Set(recommendedProducts)];\n      // console.log('Recommended Products (unique):', recommendedProducts);\n\n      const uniqueKeywords = Array.from(new Set(detailedDeficiencies)).join(',');\n      // console.log('Keywords:', uniqueKeywords);\n\n      const survey = {\n        name: state.survey.name,\n        age: state.survey.age,\n        gender: state.survey.gender,\n        height: state.survey.height,\n        weight: state.survey.weight,\n        memberUniqueId: store.state.member.memberId,\n        deficiencyId1: deficiencies[0] || null,\n        deficiencyId2: deficiencies[1] || null,\n        deficiencyId3: deficiencies[2] || null,\n        surveyDate: new Date().toISOString(),\n        recommendedProducts: recommendedProducts.join(',') || '',  // 추천 제품 저장\n        keywords: uniqueKeywords || ''\n      };\n\n      // console.log('Updating survey data:', survey);  // 업데이트 전 로그 출력\n\n      if (!survey.memberUniqueId) {\n        throw new Error('memberUniqueId가 설정되지 않았습니다.');\n      }\n\n      const existingSurveys = await dispatch('loadSurveyResult', survey.memberUniqueId);\n      if (existingSurveys && existingSurveys.length > 0) {\n        await dispatch('updateSurvey', { id: existingSurveys[0].surveyNo, survey });\n      } else {\n        await dispatch('sendSurveyData', survey);\n      }\n\n      commit('setCurrentStep', 'finish');\n    } catch (error) {\n      console.error('Failed to finish survey:', error);\n      alert('설문 완료 중 오류가 발생했습니다. 다시 시도해 주세요.');\n    }\n  },\n  async sendSurveyData(_, survey) {\n    try {\n      await axios.post('/api/surveys/create', survey);\n    } catch (error) {\n      console.error('Failed to send survey data to the server:', error);\n      throw error;\n    }\n  },\n  async updateSurvey(_, { id, survey }) {\n    try {\n      await axios.put(`/api/surveys/update/${id}`, survey);\n    } catch (error) {\n      console.error('Failed to update survey data:', error);\n      throw error;\n    }\n  },\n  async loadSurveyResult({ commit }, memberId) {\n    try {\n      const response = await axios.get(`/api/surveys/member/${memberId}`);\n      // console.log('Survey Result Loaded: ', response.data);\n      commit('setSurveyResult', response.data.length ? response.data[0] : null);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to load survey result:', error);\n      return null;\n    }\n  },\n  async fetchAgeGroupDeficiencyData({ commit, dispatch, state }) { // 추가된 부분\n    try {\n      // 결핍 데이터를 먼저 가져옵니다.\n      await dispatch('fetchDeficiencies');\n      const response = await axios.get('/api/surveys/age-group-deficiency');\n      const data = response.data;\n      // 결핍 ID와 결핍 이름 간의 매핑을 생성합니다.\n      const deficiencyMap = state.deficiencies.reduce((map, deficiency) => {\n        map[deficiency.deficiencyId] = deficiency.deficiencyName;\n        return map;\n      }, {});\n\n      console.log('Deficiency Map:', deficiencyMap); // 추가된 로그\n\n      // 결핍 데이터를 결핍 이름으로 매핑합니다.\n      const mappedData = data.map(item => { \n        const ageGroup = item[0];\n        const deficiencyId = item[1];\n        const count = item[2];\n        const deficiencyName = deficiencyMap[deficiencyId] || `Unknown (${deficiencyId})`;\n        return [ageGroup, deficiencyName, count];\n      });\n\n      console.log('Mapped Data:', mappedData); // 추가된 로그\n\n      commit('setAgeGroupDeficiencyData', mappedData);\n    } catch (error) {\n      console.error('Failed to fetch age group deficiency data:', error);\n    }\n  },\n};\n\nconst getters = {\n  currentQuestion: (state) => state.surveyQuestions[state.currentQuestionIndex],\n  currentDetailedQuestionsGroup: (state) => {\n    const deficiencyIds = Object.keys(state.currentDetailedQuestions);\n    return state.currentDetailedQuestions[deficiencyIds[state.currentDetailedQuestionIndex]] || [];\n  },\n  isLastQuestion: (state) => state.currentQuestionIndex === state.surveyQuestions.length - 1,\n  isLastDetailedQuestionsGroup: (state) => state.currentDetailedQuestionIndex === Object.keys(state.currentDetailedQuestions).length - 1,\n  canProceed: (state, getters) => {\n    if (state.currentStep === 'detailed-questions') {\n      return getters.currentDetailedQuestionsGroup.every(dq => state.detailedAnswers[dq.detailedQuestionId] !== undefined);\n    }\n    return state.selectedAnswers[state.surveyQuestions[state.currentQuestionIndex]?.id]?.length > 0;\n  },\n  isPersonalInfoComplete: (state) => {\n    return state.survey.name && \n           state.survey.age && \n           state.survey.gender && \n           state.survey.height && \n           state.survey.weight;\n  },\n  surveyResult: (state) => state.surveyResult,\n  recommendedProducts: (state, getters, rootState) => {\n    const productIds = (state.surveyResult?.recommendedProducts || \"\").split(',').map(id => parseInt(id.trim())).filter(id => !isNaN(id));\n    console.log('Filtering products with IDs:', productIds);\n    console.log('rootState.product.products:', rootState.product.products);\n    return rootState.product.products.filter(product => productIds.includes(product.productId));\n  },\n  ageGroupDeficiencyData: (state) => state.ageGroupDeficiencyData, // 추가된 부분\n};\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}