{"ast":null,"code":"import axios from '../../axios';\nconst state = {\n  topSellingProducts: [],\n  latestProducts: []\n};\nconst mutations = {\n  setTopSellingProducts(state, products) {\n    state.topSellingProducts = products;\n  },\n  setLatestProducts(state, products) {\n    state.latestProducts = products;\n  }\n};\nconst actions = {\n  async fetchTopSellingProducts({\n    commit\n  }) {\n    try {\n      const response = await axios.get('/api/products/top-selling');\n      if (response.status === 200) {\n        const products = response.data;\n        // 이미지 불러오기\n        for (let product of products) {\n          await fetchProductImage(product);\n        }\n        commit('setTopSellingProducts', products);\n      } else {\n        throw new Error('Failed to fetch top selling products');\n      }\n    } catch (error) {\n      console.error('Error fetching top selling products:', error);\n      throw error;\n    }\n  },\n  async fetchLatestProducts({\n    commit\n  }) {\n    try {\n      const response = await axios.get('/api/products/latest');\n      if (response.status === 200) {\n        const products = response.data;\n        // 이미지 불러오기\n        for (let product of products) {\n          await fetchProductImage(product);\n        }\n        commit('setLatestProducts', products);\n      } else {\n        throw new Error('Failed to fetch latest products');\n      }\n    } catch (error) {\n      console.error('Error fetching latest products:', error);\n      throw error;\n    }\n  }\n};\nconst getters = {\n  topSellingProducts: state => state.topSellingProducts,\n  latestProducts: state => state.latestProducts\n};\nasync function fetchProductImage(product) {\n  try {\n    const response = await axios.get(`/api/products/detail/${product.productId}`);\n    product.productImage = extractFirstImage(response.data.productImage);\n  } catch (error) {\n    console.error(`Error fetching image for product ID ${product.productId}:`, error);\n    product.productImage = null; // 기본 이미지로 설정\n  }\n}\nfunction extractFirstImage(htmlString) {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(htmlString, 'text/html');\n  const imgTag = doc.querySelector('img');\n  return imgTag ? imgTag.src : null;\n}\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["axios","state","topSellingProducts","latestProducts","mutations","setTopSellingProducts","products","setLatestProducts","actions","fetchTopSellingProducts","commit","response","get","status","data","product","fetchProductImage","Error","error","console","fetchLatestProducts","getters","productId","productImage","extractFirstImage","htmlString","parser","DOMParser","doc","parseFromString","imgTag","querySelector","src","namespaced"],"sources":["C:/Users/woori/IdeaProjects/pillgood_v2/src/frontend/src/store/modules/homeStore.js"],"sourcesContent":["import axios from '../../axios';\n\nconst state = {\n  topSellingProducts: [],\n  latestProducts: []\n};\n\nconst mutations = {\n  setTopSellingProducts(state, products) {\n    state.topSellingProducts = products;\n  },\n  setLatestProducts(state, products) {\n    state.latestProducts = products;\n  }\n};\n\nconst actions = {\n  async fetchTopSellingProducts({ commit }) {\n    try {\n      const response = await axios.get('/api/products/top-selling');\n      if (response.status === 200) {\n        const products = response.data;\n        // 이미지 불러오기\n        for (let product of products) {\n          await fetchProductImage(product);\n        }\n        commit('setTopSellingProducts', products);\n      } else {\n        throw new Error('Failed to fetch top selling products');\n      }\n    } catch (error) {\n      console.error('Error fetching top selling products:', error);\n      throw error;\n    }\n  },\n  async fetchLatestProducts({ commit }) {\n    try {\n      const response = await axios.get('/api/products/latest');\n      if (response.status === 200) {\n        const products = response.data;\n        // 이미지 불러오기\n        for (let product of products) {\n          await fetchProductImage(product);\n        }\n        commit('setLatestProducts', products);\n      } else {\n        throw new Error('Failed to fetch latest products');\n      }\n    } catch (error) {\n      console.error('Error fetching latest products:', error);\n      throw error;\n    }\n  }\n};\n\nconst getters = {\n  topSellingProducts: state => state.topSellingProducts,\n  latestProducts: state => state.latestProducts\n};\n\nasync function fetchProductImage(product) {\n  try {\n    const response = await axios.get(`/api/products/detail/${product.productId}`);\n    product.productImage = extractFirstImage(response.data.productImage);\n  } catch (error) {\n    console.error(`Error fetching image for product ID ${product.productId}:`, error);\n    product.productImage = null; // 기본 이미지로 설정\n  }\n}\n\nfunction extractFirstImage(htmlString) {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(htmlString, 'text/html');\n  const imgTag = doc.querySelector('img');\n  return imgTag ? imgTag.src : null;\n}\n\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}